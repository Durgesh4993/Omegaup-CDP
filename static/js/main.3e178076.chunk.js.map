{"version":3,"sources":["ColorModeSwitcher.tsx","Components/Navbar.tsx","Redux/Models/CasesModel.ts","Redux/Store.ts","Redux/Models/TitleModel.ts","Components/Header.tsx","Components/Cases/Sidebar/CaseItem.tsx","Components/Cases/Sidebar/AddCaseModal.tsx","Components/Cases/Sidebar/AddGroupModal.tsx","Components/Cases/Sidebar/Edit.tsx","Components/Cases/Sidebar/GroupItem.tsx","Components/Cases/Sidebar/Navigation.tsx","Components/Cases/Sidebar/Add.tsx","Components/Cases/Sidebar/Sidebar.tsx","Components/Cases/Input/Navbar.tsx","Components/Cases/Input/Input.tsx","Components/Cases/Main.tsx","Components/MainWindow.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Navbar","boxShadow","maxW","align","height","w","src","mr","label","calculatePoints","state","maxPoints","notDefinedCount","forEach","element","name","cases","caseElement","defined","points","individualPoints","map","globalModel","title","titleName","setTitleName","action","payload","data","selected","group","addGroup","push","editGroup","removeGroup","filter","addCase","editCase","removeCase","setSelected","GlobalStore","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Header","titleText","setTitleText","actions","useState","isEditTitleActive","setIsEditTitleActive","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","mt","defaultValue","fontWeight","placeholder","onEdit","onSubmit","event","value","console","log","onCancel","width","undefined","colorScheme","leastDestructiveRef","isCentered","ref","ml","sessionStorage","clear","window","location","reload","CaseItem","groupName","caseName","pointsDefined","shouldShowPoints","setSelectedCase","selectedCase","isActive","toFixed","AddCaseModal","initial","submitButton","autoPoints","setAutoPoints","groupData","toast","useToast","e","preventDefault","current","isValid","groupElement","ioData","description","status","isClosable","handleSubmit","isRequired","onChange","target","valueAsNumber","min","max","isDisabled","isChecked","isFullWidth","type","AddGroupModal","Edit","arePointsDefined","mb","GroupItem","showCases","setShowCases","borderColor","caseState","find","isLargeScreen","useMediaPredicate","direction","my","cursor","transition","_hover","borderLeft","paddingLeft","pageX","currentTarget","offsetLeft","clientWidth","handleCasesToggleClick","parseFloat","Math","round","isLazy","as","IconButton","syle","zIndex","motion","div","opacity","y","animate","style","display","Navigation","Add","Sidebar","divBorderColor","isOpenAdd","onOpenAdd","onCloseAdd","x","h","borderRight","pl","Input","Main","MainWindow","padding","App","isRehydrated","useStoreRehydrated","theme","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.3e178076.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport { Box, Spacer, Flex, Image, Container, Tooltip } from \"@chakra-ui/react\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\n\nconst Navbar = () => {\n  return (\n    <Box boxShadow={\"md\"}>\n      <Container maxW={\"container.lg\"}>\n        <Flex align={\"center\"} height={\"38px\"}>\n          <Box w={\"86px\"}>\n            <Image\n              w={\"full\"}\n              src={\"https://omegaup.com/preguntas//omegaup_curves.png\"}\n            />\n          </Box>\n          <Spacer />\n          <Box mr={5}>\n            <ColorModeSwitcher />\n          </Box>\n          <Box>\n            <Tooltip\n              label={\"Colabora con nosotros en Github!\"}\n              aria-label={\"Colabora\"}\n            >\n              <span>\n                <AiFillGithub size={25} />\n              </span>\n            </Tooltip>\n          </Box>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Navbar;\n","import { action, Action } from \"easy-peasy\";\n\ninterface IGroup {\n  name: string | null;\n  points: number | null;\n  defined: boolean;\n  cases: ICase[];\n}\n\ninterface ICase {\n  name: string | null;\n  group: string | null;\n  points: number | null;\n  defined: boolean;\n  ioData: object;\n}\n\nexport interface ICasesModel {\n  data: IGroup[];\n  selected: { name: string; group: string };\n\n  addGroup: Action<ICasesModel, IGroup>;\n  editGroup: Action<ICasesModel, IGroup>;\n  removeGroup: Action<ICasesModel, string>;\n\n  addCase: Action<ICasesModel, ICase>;\n  editCase: Action<ICasesModel, ICase>;\n  removeCase: Action<ICasesModel, { name: string; group: string }>;\n  setSelected: Action<ICasesModel, { name: string; group: string }>;\n}\n\nfunction calculatePoints(state: IGroup[]) {\n  let maxPoints = 100;\n  let notDefinedCount = 0;\n\n  state.forEach((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases.forEach((caseElement) => {\n        if (caseElement.defined) {\n          maxPoints -= caseElement.points ? caseElement.points : 0;\n        } else {\n          notDefinedCount++;\n        }\n      });\n    } else {\n      if (element.defined) {\n        maxPoints -= element.points ? element.points : 0;\n      } else {\n        notDefinedCount++;\n      }\n    }\n  });\n\n  let individualPoints = maxPoints / notDefinedCount;\n\n  state = state.map((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases = element.cases.map((caseElement) => {\n        if (!caseElement.defined) {\n          caseElement.points = individualPoints;\n        }\n        return caseElement;\n      });\n    }\n    if (!element.defined) {\n      element.points = individualPoints;\n    }\n    return element;\n  });\n\n  return state;\n}\n\nconst CasesModel = {\n  data: [\n    {\n      name: \"Sin Grupo\",\n      cases: [],\n      defined: false,\n      points: null,\n    },\n  ],\n  selected: {\n    name: \"none\",\n    group: \"none\",\n  },\n  addGroup: action((state, payload) => {\n    state.data.push(payload);\n    state.data = calculatePoints(state.data);\n  }),\n  editGroup: action((state, payload) => {\n    state.data.map((element) => {\n      if (element.name === payload.name) {\n        element = payload;\n      }\n      return element;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  removeGroup: action((state, payload) => {\n    state.data = state.data.filter((element) => {\n      return element.name !== payload;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  addCase: action((state, payload) => {\n    state.data.map((element) => {\n      if (element.name === payload.group) {\n        element.cases.push(payload);\n      }\n      return element;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  editCase: action((state, payload) => {\n    state.data.map((element) => {\n      if (element.name === payload.group) {\n        element.cases.map((caseElement) => {\n          if (caseElement.name === payload.name) {\n            caseElement = payload;\n          }\n          return caseElement;\n        });\n      }\n      return element;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  removeCase: action((state, payload) => {\n    state.data.map((element) => {\n      if (element.name === payload.group) {\n        element.cases = element.cases.filter((caseElement) => {\n          return (\n            caseElement.name !== payload.name &&\n            caseElement.group !== payload.group\n          );\n        });\n      }\n      return element;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  setSelected: action((state, payload) => {\n    state.selected = payload;\n  }),\n} as ICasesModel;\n\nexport default CasesModel;\n","import title, { ITitleModel } from \"./Models/TitleModel\";\nimport cases, { ICasesModel } from \"./Models/CasesModel\";\n\nimport { createStore, createTypedHooks, persist } from \"easy-peasy\";\n\nconst globalModel = {\n  title,\n  cases,\n};\n\ninterface IGlobalModel {\n  title: ITitleModel;\n  cases: ICasesModel;\n}\n\nconst GlobalStore = createStore(persist(globalModel));\nexport default GlobalStore;\n\nconst typedHooks = createTypedHooks<IGlobalModel>();\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import { action, Action } from \"easy-peasy\";\n\nexport interface ITitleModel {\n  titleName: string;\n  setTitleName: Action<ITitleModel, string>;\n}\n\nconst TitleModel = <ITitleModel>{\n  titleName: \"Nuevo Problema\",\n  setTitleName: action((state, payload) => {\n    state.titleName = payload;\n  }),\n};\n\nexport default TitleModel;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  HStack,\n  Spacer,\n  useDisclosure,\n  AlertDialogOverlay,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogBody,\n  AlertDialog,\n} from \"@chakra-ui/react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../Redux/Store\";\n\nconst Header = () => {\n  const titleText = useStoreState((state) => state.title.titleName);\n  const setTitleText = useStoreActions((actions) => actions.title.setTitleName);\n\n  const [isEditTitleActive, setIsEditTitleActive] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  function handleTitleSubmit(value: string) {\n    setIsEditTitleActive(false);\n    setTitleText(value);\n    console.log(value);\n  }\n\n  function createNewProblem() {\n    sessionStorage.clear();\n    window.location.reload();\n  }\n\n  return (\n    <Container maxW={\"container.lg\"}>\n      <Box mt={\"5\"}>\n        <HStack>\n          <Editable\n            defaultValue={titleText}\n            fontSize={\"xl\"}\n            fontWeight={\"bold\"}\n            placeholder={\"Escribe el nombre del problema\"}\n            onEdit={() => setIsEditTitleActive(true)}\n            onSubmit={(event) => handleTitleSubmit(event)}\n            onCancel={() => setIsEditTitleActive(false)}\n            width={isEditTitleActive ? \"50%\" : undefined}\n          >\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n          <span>\n            <AiFillEdit />\n          </span>\n          <Spacer />\n          <Button size={\"sm\"}> Cargar Problema </Button>\n          <Button size={\"sm\"} colorScheme={\"blue\"}>\n            Guardar Problema\n          </Button>\n          <Button size={\"sm\"} colorScheme={\"orange\"} onClick={onOpen}>\n            Nuevo Problema\n          </Button>\n          <AlertDialog\n            leastDestructiveRef={cancelRef}\n            onClose={onClose}\n            isOpen={isOpen}\n            isCentered\n          >\n            <AlertDialogOverlay />\n\n            <AlertDialogContent>\n              <AlertDialogHeader>Crear nuevo problema</AlertDialogHeader>\n              <AlertDialogBody>\n                ¿Deseas crear un nuevo problema? Se borrará TODO el problema\n                anterior. Guarda el problema primero antes de crear uno nuevo.\n              </AlertDialogBody>\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={onClose}>\n                  No\n                </Button>\n                <Button\n                  colorScheme=\"red\"\n                  ml={3}\n                  onClick={() => createNewProblem()}\n                >\n                  Sí\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </HStack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { Badge, Button, HStack } from \"@chakra-ui/react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  groupName: string;\n  caseName: string;\n  pointsDefined: boolean;\n  points: number;\n  shouldShowPoints: boolean;\n}\nconst CaseItem = ({\n  groupName,\n  caseName,\n  pointsDefined,\n  points,\n  shouldShowPoints,\n}: PropTypes) => {\n  const setSelectedCase = useStoreActions(\n    (actions) => actions.cases.setSelected\n  );\n  const selectedCase = useStoreState((state) => state.cases.selected);\n\n  function handleSelectedCase() {\n    setSelectedCase({\n      name: caseName,\n      group: groupName,\n    });\n  }\n\n  return (\n    <Button\n      variant={\"ghost\"}\n      size={\"sm\"}\n      onClick={() => handleSelectedCase()}\n      isActive={\n        selectedCase?.name === caseName && selectedCase.group === groupName\n      }\n    >\n      <HStack>\n        <span>{caseName}</span>\n        {shouldShowPoints && (\n          <Badge colorScheme={pointsDefined ? \"green\" : \"blue\"}>\n            {points.toFixed(2) + \" PTS\"}\n          </Badge>\n        )}\n      </HStack>\n    </Button>\n  );\n};\n\nexport default CaseItem;\n","import * as React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  onClose: () => void;\n  initial?: {\n    caseName: string;\n    groupName: string;\n    points: number;\n    pointsDefined: boolean;\n  };\n  submitButton: string;\n}\n\n// TODO handle logic for no group cases\n\nconst AddCaseModal = ({ onClose, initial, submitButton }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(\n    initial?.pointsDefined ? initial?.pointsDefined : true\n  );\n\n  const caseName = useRef<string | null>(initial ? initial.caseName : null);\n  const groupName = useRef<string | null>(initial ? initial.groupName : null);\n  const points = useRef<number | null>(initial ? initial.points : 50);\n  const pointsDefined = useRef<boolean>(\n    initial ? initial.pointsDefined : false\n  );\n\n  const addCase = useStoreActions((actions) => actions.cases.addCase);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    if (groupName.current === null) {\n      groupName.current = \"Sin Grupo\";\n    }\n\n    if (caseName === null || caseName.current === \"\") {\n      toast({\n        title: \"Por favor ingresa los datos\",\n        description: \"No puedes dejar campos vacios\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === groupName.current) {\n        groupElement.cases.forEach((caseElement) => {\n          if (caseElement.name === caseName.current) {\n            isValid = false;\n            return;\n          }\n        });\n      }\n      if (!isValid) return;\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear caso\",\n        description:\n          \"No puedes tener casos con el mismo nombre en un mismo grupo\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addCase({\n      name: caseName.current,\n      group: groupName.current,\n      points: points.current,\n      defined: pointsDefined.current,\n      ioData: {},\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del caso</FormLabel>\n        <Input\n          onChange={(e) => (caseName.current = e.target.value)}\n          defaultValue={initial?.caseName}\n        />\n      </FormControl>\n      <FormControl mt={5} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Select\n          onChange={(e) => (groupName.current = e.target.value)}\n          defaultValue={initial?.groupName}\n        >\n          {groupData.map((group) => {\n            return (\n              <option\n                value={group.name ? group.name : undefined}\n                key={group.name}\n              >\n                {group.name}\n              </option>\n            );\n          })}\n        </Select>\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n          defaultValue={initial?.points}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            pointsDefined.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type=\"submit\">\n        {submitButton}\n      </Button>\n    </form>\n  );\n};\n\nexport default AddCaseModal;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  onClose: () => void;\n  initial?: {\n    groupName: string;\n    points: number;\n    pointsDefined: boolean;\n  };\n  submitButton: string;\n}\nconst AddGroupModal = ({ onClose, initial, submitButton }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(\n    initial?.pointsDefined ? !initial?.pointsDefined : true\n  );\n\n  const groupName = useRef<string | null>(initial ? initial.groupName : null);\n  const points = useRef<number | null>(initial ? initial.points : 50);\n  const pointsDefined = useRef<boolean>(\n    initial ? initial.pointsDefined : false\n  );\n\n  const addGroup = useStoreActions((actions) => actions.cases.addGroup);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === groupName.current) {\n        isValid = false;\n        return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addGroup({\n      name: groupName.current,\n      cases: [],\n      points: points.current,\n      defined: pointsDefined.current,\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Input\n          onChange={(e) => (groupName.current = e.target.value)}\n          defaultValue={initial?.groupName}\n        />\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n          defaultValue={initial?.points}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            pointsDefined.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        {submitButton}\n      </Button>\n    </form>\n  );\n};\n\nexport default AddGroupModal;\n","import * as React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\n\ninterface PropTypes {\n  type: \"group\" | \"case\";\n  isOpen: boolean;\n  onClose: () => void;\n  groupName: string;\n  caseName?: string;\n  points: number;\n  arePointsDefined: boolean;\n}\nconst Edit = ({\n  type,\n  isOpen,\n  onClose,\n  groupName,\n  caseName = \"\",\n  points,\n  arePointsDefined,\n}: PropTypes) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Editar {type === \"group\" ? \"Grupo\" : \"Caso\"}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mb={5}>\n          {type === \"group\" ? (\n            <AddGroupModal\n              onClose={onClose}\n              initial={{\n                groupName: groupName,\n                points: points,\n                pointsDefined: arePointsDefined,\n              }}\n              submitButton={\"Editar\"}\n            />\n          ) : (\n            <AddCaseModal\n              onClose={onClose}\n              initial={{\n                caseName: caseName,\n                groupName: groupName,\n                points: points,\n                pointsDefined: arePointsDefined,\n              }}\n              submitButton={\"Editar\"}\n            />\n          )}\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default Edit;\n","import * as React from \"react\";\nimport {\n  Badge,\n  Box,\n  Divider,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Tooltip,\n  useColorModeValue,\n  useDisclosure,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport CaseItem from \"./CaseItem\";\nimport { useStoreState } from \"../../../Redux/Store\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Edit from \"./Edit\";\n\ninterface PropTypes {\n  name: string | null;\n  points: number | null;\n  arePointsDefined: boolean;\n}\n\nconst GroupItem = ({ name, points, arePointsDefined }: PropTypes) => {\n  const [showCases, setShowCases] = useState(false);\n\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n  const caseState = useStoreState((state) => {\n    return state.cases.data.find((element) => element.name === name);\n  });\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  function handleCasesToggleClick(event: React.MouseEvent<HTMLDivElement>) {\n    let percentage =\n      ((event.pageX - event.currentTarget.offsetLeft) * 100) /\n      event.currentTarget.clientWidth;\n    if (percentage < 80) setShowCases(!showCases);\n  }\n\n  return (\n    <Flex direction={\"column\"}>\n      <Box my={2}>\n        <HStack\n          mb={2}\n          cursor={\"pointer\"}\n          transition={\"padding-left 0.1s\"}\n          _hover={{\n            borderLeft: \"2px\",\n            borderColor: `${borderColor}`,\n            paddingLeft: \"5px\",\n          }}\n          onClick={(event) => handleCasesToggleClick(event)}\n        >\n          <Box>{name === \"mainGroup\" ? \"Sin Grupo\" : name}</Box>\n          <Spacer />\n          {name !== \"Sin Grupo\" && (\n            <>\n              <Tooltip\n                label={\n                  \"Estos serán los puntos que obtendrá el usuario si resuelve correctamente el grupo\"\n                }\n              >\n                <Badge\n                  colorScheme={arePointsDefined ? \"green\" : \"blue\"}\n                  size={\"sm\"}\n                >\n                  {isLargeScreen ? (\n                    <span> {parseFloat(\"\" + points).toFixed(2) + \" pts\"}</span>\n                  ) : (\n                    <span>{points && Math.round(points)} </span>\n                  )}\n                </Badge>\n              </Tooltip>\n\n              <Menu isLazy>\n                <MenuButton\n                  as={IconButton}\n                  icon={<Dots />}\n                  size={\"sm\"}\n                  syle={{ zIndex: 99 }}\n                />\n                <MenuList>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpen}>\n                    Editar Grupo\n                  </MenuItem>\n                  <MenuItem fontSize={\"sm\"} onClick={() => {}}>\n                    Eliminar Grupo\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n              <Edit\n                type={\"group\"}\n                isOpen={isOpen}\n                onClose={onClose}\n                groupName={name}\n                points={points}\n                arePointsDefined={arePointsDefined}\n              />\n            </>\n          )}\n        </HStack>\n        <Divider />\n      </Box>\n      <Box ml={2}>\n        {caseState &&\n          showCases &&\n          caseState.cases.map((element) => (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              style={{ display: \"inline-block\" }}\n              key={\n                element.name && element.group && element.name + element.group\n              }\n            >\n              <CaseItem\n                caseName={element.name ? element.name : \"\"}\n                groupName={element.group ? element.group : \"\"}\n                pointsDefined={element.defined}\n                points={element.points ? element.points : 0}\n                shouldShowPoints={element.group === \"Sin Grupo\"}\n              />\n            </motion.div>\n          ))}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default GroupItem;\n","import * as React from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport {\n  Box,\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport GroupItem from \"./GroupItem\";\nimport AddCaseModal from \"./AddCaseModal\";\n\nconst Navigation = () => {\n  const caseState = useStoreState((state) => state.cases.data);\n\n  return (\n    <>\n      <Box mt={2}>\n        {caseState.map((group) => (\n          <GroupItem\n            name={group.name}\n            points={group.points}\n            arePointsDefined={group.defined}\n            key={group.name}\n          />\n        ))}\n      </Box>\n    </>\n  );\n};\n\nexport default Navigation;\n","import * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Add = ({ isOpen, onClose }: PropTypes) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Agregar </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Tabs size={\"sm\"}>\n            <TabList>\n              <Tab> Caso </Tab>\n              <Tab> Grupo </Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <AddCaseModal onClose={onClose} submitButton={\"Agregar\"} />\n              </TabPanel>\n              <TabPanel>\n                <AddGroupModal onClose={onClose} submitButton={\"Agregar\"} />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default Add;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Spacer,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport Navigation from \"./Navigation\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Add from \"./Add\";\nconst Sidebar = () => {\n  const divBorderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n\n  const {\n    isOpen: isOpenAdd,\n    onOpen: onOpenAdd,\n    onClose: onCloseAdd,\n  } = useDisclosure();\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  return (\n    <motion.div initial={{ opacity: 0, x: -50 }} animate={{ opacity: 1, x: 0 }}>\n      <Box\n        w={\"100%\"}\n        h={\"75vh\"}\n        borderRight={\"1px\"}\n        borderColor={divBorderColor}\n      >\n        <Box width={\"90%\"}>\n          <Flex align={\"center\"} mb={4}>\n            <Text mr={5} fontSize={\"xl\"} fontWeight={\"bold\"}>\n              Grupos\n            </Text>\n            <Spacer />\n            <Button size={\"sm\"} colorScheme={\"green\"} onClick={onOpenAdd}>\n              {isLargeScreen ? <p> Agregar</p> : <p> + </p>}\n            </Button>\n            <Add isOpen={isOpenAdd} onClose={onCloseAdd} />\n          </Flex>\n          <Divider />\n          <Navigation />\n        </Box>\n      </Box>\n    </motion.div>\n  );\n};\n\nexport default Sidebar;\n","import * as React from \"react\";\nimport { useStoreState } from \"../../../Redux/Store\";\nimport {\n  Divider,\n  HStack,\n  Text,\n  Spacer,\n  Button,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\nconst Navbar = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const selectedCase = useStoreState((state) => state.cases.selected);\n\n  return (\n    <HStack h={\"20%\"} w={\"100%\"} pl={5}>\n      <Text fontWeight={\"bold\"} fontSize={20}>\n        {selectedCase?.name}\n      </Text>\n      <h2> {selectedCase?.group}</h2>\n      <Spacer />\n      <Button size={\"sm\"} onClick={onOpen}>\n        {\" \"}\n        Editar Caso{\" \"}\n      </Button>\n      <Button size={\"sm\"}> Eliminar Caso </Button>\n    </HStack>\n  );\n};\n\nexport default Navbar;\n","import * as React from \"react\";\nimport Navbar from \"./Navbar\";\n\nconst Input = () => {\n  return <Navbar />;\n};\n\nexport default Input;\n","import * as React from \"react\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport { HStack, Flex, Box } from \"@chakra-ui/react\";\nimport Input from \"./Input/Input\";\n\nconst Main = () => {\n  return (\n    <Flex>\n      <Box w={\"30%\"}>\n        <Sidebar />\n      </Box>\n      <Input />\n    </Flex>\n  );\n};\n\nexport default Main;\n","import * as React from \"react\";\nimport { Container, HStack } from \"@chakra-ui/react\";\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\nimport { BiCodeBlock as CodeIcon } from \"react-icons/bi\";\nimport { BsPencil as EditIcon } from \"react-icons/bs\";\nimport { IoMdCheckmarkCircleOutline as CheckIcon } from \"react-icons/io\";\nimport Sidebar from \"./Cases/Sidebar/Sidebar\";\nimport Main from \"./Cases/Main\";\n\nconst MainWindow = () => {\n  return (\n    <>\n      <Container maxW={\"container.lg\"} mt={3} h={\"80vh\"} padding={\"0\"}>\n        <Tabs variant={\"enclosed\"} size={\"sm\"} isLazy={true}>\n          <TabList>\n            <Tab>\n              <HStack>\n                <CodeIcon />\n                <p>Código Solución</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <CheckIcon />\n                <p>Casos de Prueba</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <EditIcon />\n                <p>Redacción</p>\n              </HStack>\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>1</TabPanel>\n            <TabPanel>\n              <Main />\n            </TabPanel>\n            <TabPanel>3</TabPanel>\n          </TabPanels>\n        </Tabs>\n        {/*<Sidebar />*/}\n      </Container>\n    </>\n  );\n};\n\nexport default MainWindow;\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { useStoreRehydrated } from \"easy-peasy\";\nimport Navbar from \"./Components/Navbar\";\nimport Header from \"./Components/Header\";\nimport MainWindow from \"./Components/MainWindow\";\n\nexport const App = () => {\n  const isRehydrated = useStoreRehydrated();\n\n  return (\n    <ChakraProvider theme={theme}>\n      {!isRehydrated ? (\n        <h1> Loading </h1>\n      ) : (\n        <>\n          <Navbar />\n          <Header />\n          <MainWindow />\n        </>\n      )}\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./Redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store={store}>\n      <ColorModeScript />\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}