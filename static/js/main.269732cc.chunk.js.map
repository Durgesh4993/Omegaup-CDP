{"version":3,"sources":["ColorModeSwitcher.tsx","Components/Navbar.tsx","Redux/Models/TitleModel.ts","Redux/Models/CasesModel.ts","Redux/Store.ts","Components/Header.tsx","Components/Cases/Sidebar/CaseItem.tsx","Components/Cases/Sidebar/EditGroupModal.tsx","Components/Cases/Sidebar/EditGroup.tsx","Components/Cases/Sidebar/DeleteGroup.tsx","Components/Cases/Sidebar/GroupItem.tsx","Components/Cases/Sidebar/Navigation.tsx","Components/Cases/Sidebar/AddCaseModal.tsx","Components/Cases/Sidebar/AddGroupModal.tsx","Components/Cases/Sidebar/Add.tsx","Components/Cases/Sidebar/Sidebar.tsx","Components/Cases/Sidebar/EditCaseModal.tsx","Components/Cases/Sidebar/EditCase.tsx","Components/Cases/Sidebar/DeleteItem.tsx","Components/Cases/Input/Navbar.tsx","Components/Cases/Input/Line.tsx","Components/Cases/Input/InputLines.tsx","Components/Cases/Input/Input.tsx","Components/Cases/Main.tsx","Components/MainWindow.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Navbar","boxShadow","maxW","align","height","w","src","mr","label","TitleModel","titleName","setTitleName","action","state","payload","calculatePoints","maxPoints","notDefinedCount","forEach","element","name","cases","caseElement","defined","points","individualPoints","map","globalModel","title","data","groupId","uuid","selected","caseId","addGroup","push","editGroup","groupIndex","findIndex","groupElement","undefined","removeGroup","filter","addCase","groupState","find","editCase","caseData","case","lastId","newGroup","caseIndex","removeCase","setSelected","GlobalStore","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Header","titleText","setTitleText","actions","useState","isEditTitleActive","setIsEditTitleActive","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","mt","defaultValue","fontWeight","placeholder","onEdit","onSubmit","event","value","console","log","onCancel","width","colorScheme","leastDestructiveRef","isCentered","ref","ml","sessionStorage","clear","window","location","reload","CaseItem","shouldShowPoints","setSelectedCase","selectedCase","isActive","toFixed","AddGroupModal","autoPoints","setAutoPoints","nameRef","pointsRef","definedRef","groupData","toast","useToast","e","preventDefault","isValid","current","description","status","isClosable","handleSubmit","isRequired","onChange","target","valueAsNumber","min","max","isDisabled","isChecked","isFullWidth","type","EditGroup","mb","EditGroupModal","DeleteGroup","GroupItem","showCases","setShowCases","borderColor","caseState","isLargeScreen","useMediaPredicate","isOpenEdit","onOpenEdit","onCloseEdit","isOpenRemove","onOpenRemove","onCloseRemove","direction","my","cursor","transition","_hover","borderLeft","paddingLeft","pageX","currentTarget","offsetLeft","clientWidth","handleCasesToggleClick","parseFloat","Math","round","isLazy","as","IconButton","syle","zIndex","motion","div","initial","opacity","y","animate","style","display","Navigation","group","key","AddCaseModal","selectedValue","setSelectedValue","hasGroup","setHasGroup","caseName","pointsDefined","options","selectedGroupId","obj","groupName","Add","submitButton","edit","Sidebar","divBorderColor","isOpenAdd","onOpenAdd","onCloseAdd","x","h","borderRight","EditCaseModal","EditCase","DeleteItem","selectedCaseData","setSelectedCaseData","selectedGroupNameRef","useEffect","pl","Line","hide","mode","setMode","p","border","borderRadius","DragHandle","disabled","Edit","Delete","InputLines","Input","Main","MainWindow","padding","App","isRehydrated","useStoreRehydrated","theme","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.269732cc.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport { Box, Spacer, Flex, Image, Container, Tooltip } from \"@chakra-ui/react\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\n\nconst Navbar = () => {\n  return (\n    <Box boxShadow={\"md\"}>\n      <Container maxW={\"container.lg\"}>\n        <Flex align={\"center\"} height={\"38px\"}>\n          <Box w={\"86px\"}>\n            <Image\n              w={\"full\"}\n              src={\"https://omegaup.com/preguntas//omegaup_curves.png\"}\n            />\n          </Box>\n          <Spacer />\n          <Box mr={5}>\n            <ColorModeSwitcher />\n          </Box>\n          <Box>\n            <Tooltip\n              label={\"Colabora con nosotros en Github!\"}\n              aria-label={\"Colabora\"}\n            >\n              <span>\n                <AiFillGithub size={25} />\n              </span>\n            </Tooltip>\n          </Box>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Navbar;\n","import { action, Action } from \"easy-peasy\";\n\nexport interface ITitleModel {\n  titleName: string;\n  setTitleName: Action<ITitleModel, string>;\n}\n\nconst TitleModel = <ITitleModel>{\n  titleName: \"Nuevo Problema\",\n  setTitleName: action((state, payload) => {\n    state.titleName = payload;\n  }),\n};\n\nexport default TitleModel;\n","import { action, Action, Computed, computed } from \"easy-peasy\";\nimport { uuid } from \"uuidv4\";\n\nexport interface IGroup {\n  groupId: string;\n  name: string;\n  points: number;\n  defined: boolean;\n  cases: ICase[];\n}\n\nexport interface ICase {\n  caseId: string;\n  name: string;\n  groupId: string;\n  points: number;\n  defined: boolean;\n}\n\ninterface caseIndentifier {\n  groupId: string;\n  caseId: string;\n}\n\nexport interface ICasesModel {\n  data: IGroup[];\n  selected: caseIndentifier;\n\n  addGroup: Action<ICasesModel, IGroup>;\n  editGroup: Action<ICasesModel, IGroup>;\n  removeGroup: Action<ICasesModel, string>;\n\n  addCase: Action<ICasesModel, ICase>;\n  editCase: Action<ICasesModel, { case: ICase; lastId: string }>;\n  removeCase: Action<ICasesModel, caseIndentifier>;\n\n  setSelected: Action<ICasesModel, caseIndentifier>;\n}\n\nfunction calculatePoints(state: IGroup[]) {\n  let maxPoints = 100;\n  let notDefinedCount = 0;\n\n  state.forEach((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases.forEach((caseElement) => {\n        if (caseElement.defined) {\n          maxPoints -= caseElement.points ? caseElement.points : 0;\n        } else {\n          notDefinedCount++;\n        }\n      });\n    } else {\n      if (element.defined) {\n        maxPoints -= element.points ? element.points : 0;\n      } else {\n        notDefinedCount++;\n      }\n    }\n  });\n\n  let individualPoints = maxPoints / notDefinedCount;\n\n  state = state.map((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases = element.cases.map((caseElement) => {\n        if (!caseElement.defined) {\n          caseElement.points = individualPoints;\n        }\n        return caseElement;\n      });\n    }\n    if (!element.defined) {\n      element.points = individualPoints;\n    }\n    return element;\n  });\n\n  return state;\n}\n\nconst CasesModel = {\n  data: [\n    {\n      groupId: uuid(),\n      name: \"Sin Grupo\",\n      cases: [],\n      defined: false,\n      points: 0,\n    },\n  ],\n  selected: {\n    groupId: \"none\",\n    caseId: \"none\",\n  },\n  addGroup: action((state, payload) => {\n    state.data.push(payload);\n    state.data = calculatePoints(state.data);\n  }),\n  editGroup: action((state, payload) => {\n    const groupIndex = state.data.findIndex(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n\n    if (groupIndex !== undefined) state.data[groupIndex] = payload;\n\n    state.data = calculatePoints(state.data);\n  }),\n  removeGroup: action((state, payload) => {\n    state.data = state.data.filter((element) => {\n      return element.groupId !== payload;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  addCase: action((state, payload) => {\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n    groupState?.cases.push(payload);\n    state.data = calculatePoints(state.data);\n  }),\n  editCase: action((state, payload) => {\n    const { case: caseData, lastId } = payload;\n\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === lastId\n    );\n\n    if (lastId !== caseData.groupId) {\n      if (groupState) {\n        groupState.cases = groupState.cases.filter(\n          (caseElement) => caseElement.caseId !== caseData.caseId\n        );\n      }\n\n      const newGroup = state.data.find(\n        (groupElement) => groupElement.groupId === caseData.groupId\n      );\n\n      newGroup?.cases.push(caseData);\n      calculatePoints(state.data);\n      return;\n    }\n\n    const caseIndex = groupState?.cases.findIndex(\n      (caseElement) => caseElement.caseId === caseData.caseId\n    );\n\n    if (groupState !== undefined && caseIndex !== undefined) {\n      groupState.cases[caseIndex] = caseData;\n    }\n  }),\n\n  removeCase: action((state, payload) => {\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n\n    if (groupState !== undefined) {\n      groupState.cases = groupState.cases.filter(\n        (caseElement) => caseElement.caseId !== payload.caseId\n      );\n    }\n    state.data = calculatePoints(state.data);\n  }),\n  setSelected: action((state, payload) => {\n    state.selected = payload;\n  }),\n} as ICasesModel;\n\nexport default CasesModel;\n","import title, { ITitleModel } from \"./Models/TitleModel\";\nimport cases, { ICasesModel } from \"./Models/CasesModel\";\n\nimport { createStore, createTypedHooks, persist } from \"easy-peasy\";\n\nconst globalModel = {\n  title,\n  cases,\n};\n\ninterface IGlobalModel {\n  title: ITitleModel;\n  cases: ICasesModel;\n}\n\nconst GlobalStore = createStore(persist(globalModel));\nexport default GlobalStore;\n\nconst typedHooks = createTypedHooks<IGlobalModel>();\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  HStack,\n  Spacer,\n  useDisclosure,\n  AlertDialogOverlay,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogBody,\n  AlertDialog,\n} from \"@chakra-ui/react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../Redux/Store\";\n\nconst Header = () => {\n  const titleText = useStoreState((state) => state.title.titleName);\n  const setTitleText = useStoreActions((actions) => actions.title.setTitleName);\n\n  const [isEditTitleActive, setIsEditTitleActive] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  function handleTitleSubmit(value: string) {\n    setIsEditTitleActive(false);\n    setTitleText(value);\n    console.log(value);\n  }\n\n  function createNewProblem() {\n    sessionStorage.clear();\n    window.location.reload();\n  }\n\n  return (\n    <Container maxW={\"container.lg\"}>\n      <Box mt={\"5\"}>\n        <HStack>\n          <Editable\n            defaultValue={titleText}\n            fontSize={\"xl\"}\n            fontWeight={\"bold\"}\n            placeholder={\"Escribe el nombre del problema\"}\n            onEdit={() => setIsEditTitleActive(true)}\n            onSubmit={(event) => handleTitleSubmit(event)}\n            onCancel={() => setIsEditTitleActive(false)}\n            width={isEditTitleActive ? \"50%\" : undefined}\n          >\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n          <span>\n            <AiFillEdit />\n          </span>\n          <Spacer />\n          <Button size={\"sm\"}> Cargar Problema </Button>\n          <Button size={\"sm\"} colorScheme={\"blue\"}>\n            Guardar Problema\n          </Button>\n          <Button size={\"sm\"} colorScheme={\"orange\"} onClick={onOpen}>\n            Nuevo Problema\n          </Button>\n          <AlertDialog\n            leastDestructiveRef={cancelRef}\n            onClose={onClose}\n            isOpen={isOpen}\n            isCentered\n          >\n            <AlertDialogOverlay />\n\n            <AlertDialogContent>\n              <AlertDialogHeader>Crear nuevo problema</AlertDialogHeader>\n              <AlertDialogBody>\n                ¿Deseas crear un nuevo problema? Se borrará TODO el problema\n                anterior. Guarda el problema primero antes de crear uno nuevo.\n              </AlertDialogBody>\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={onClose}>\n                  No\n                </Button>\n                <Button\n                  colorScheme=\"red\"\n                  ml={3}\n                  onClick={() => createNewProblem()}\n                >\n                  Sí\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </HStack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { Badge, Button, HStack } from \"@chakra-ui/react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\n\ninterface PropTypes extends ICase {\n  shouldShowPoints: boolean;\n}\nconst CaseItem = (props: PropTypes) => {\n  const { name, points, caseId, groupId, defined, shouldShowPoints } = props;\n\n  const setSelectedCase = useStoreActions(\n    (actions) => actions.cases.setSelected\n  );\n  const selectedCase = useStoreState((state) => state.cases.selected);\n\n  function handleSelectedCase() {\n    setSelectedCase({ caseId: caseId, groupId: groupId });\n  }\n\n  return (\n    <Button\n      variant={\"ghost\"}\n      size={\"sm\"}\n      onClick={() => handleSelectedCase()}\n      isActive={\n        selectedCase.caseId === caseId && selectedCase.groupId === groupId\n      }\n    >\n      <HStack>\n        <span>{name}</span>\n        {shouldShowPoints && (\n          <Badge colorScheme={defined ? \"green\" : \"blue\"}>\n            {points.toFixed(2) + \" PTS\"}\n          </Badge>\n        )}\n      </HStack>\n    </Button>\n  );\n};\n\nexport default CaseItem;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport { uuid } from \"uuidv4\";\n\ninterface PropTypes extends IGroup {\n  onClose: () => void;\n}\n\nconst AddGroupModal = (props: PropTypes) => {\n  const { groupId, name, points, defined, onClose, cases } = props;\n\n  const [autoPoints, setAutoPoints] = useState(!defined);\n\n  const nameRef = useRef<string>(name);\n  const pointsRef = useRef<number>(points);\n  const definedRef = useRef<boolean>(defined);\n\n  const editGroup = useStoreActions((actions) => actions.cases.editGroup);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === nameRef.current && nameRef.current !== name) {\n        isValid = false;\n        return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    editGroup({\n      groupId: groupId,\n      points: pointsRef.current,\n      defined: definedRef.current,\n      name: nameRef.current,\n      cases: cases,\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Input\n          onChange={(e) => (nameRef.current = e.target.value)}\n          defaultValue={name}\n        />\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          defaultValue={points}\n          onChange={(e, valueAsNumber) => (pointsRef.current = valueAsNumber)}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            definedRef.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Agregar Problema\n      </Button>\n    </form>\n  );\n};\n\nexport default AddGroupModal;\n","import * as React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\nimport { IGroup } from \"../../../Redux/Models/CasesModel\";\nimport EditGroupModal from \"./EditGroupModal\";\n\ninterface PropTypes extends IGroup {\n  isOpen: boolean;\n  onClose: () => void;\n}\nconst EditGroup = (props: PropTypes) => {\n  const { isOpen, onClose } = props;\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Editar Grupo </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mb={5}>\n          <EditGroupModal {...props} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditGroup;\n","import * as React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupId: string;\n}\n\nconst DeleteGroup = (props: PropTypes) => {\n  const { isOpen, onClose, groupId } = props;\n\n  const toast = useToast();\n\n  const removeGroup = useStoreActions((actions) => actions.cases.removeGroup);\n\n  function deleteGroup() {\n    toast({\n      title: \"Grupo borrado\",\n      description: \"El grupo ha sido borrado exitosamente\",\n      status: \"success\",\n      isClosable: true,\n    });\n\n    removeGroup(groupId);\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Borar Grupo</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar este grupo? Este cambio no se puede\n          deshacer\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => deleteGroup()}\n          >\n            Borrar Grupo\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DeleteGroup;\n","import * as React from \"react\";\nimport {\n  Badge,\n  Box,\n  Divider,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Tooltip,\n  useColorModeValue,\n  useDisclosure,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport CaseItem from \"./CaseItem\";\nimport { useStoreState } from \"../../../Redux/Store\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport EditGroup from \"./EditGroup\";\nimport { IGroup } from \"../../../Redux/Models/CasesModel\";\nimport DeleteGroup from \"./DeleteGroup\";\n\ninterface PropTypes extends IGroup {}\n\nconst GroupItem = (props: PropTypes) => {\n  const { name, defined, points, groupId } = props;\n  const [showCases, setShowCases] = useState(false);\n\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n  const caseState = useStoreState((state) => {\n    return state.cases.data.find((element) => element.name === name);\n  });\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenRemove,\n    onOpen: onOpenRemove,\n    onClose: onCloseRemove,\n  } = useDisclosure();\n\n  function handleCasesToggleClick(event: React.MouseEvent<HTMLDivElement>) {\n    let percentage =\n      ((event.pageX - event.currentTarget.offsetLeft) * 100) /\n      event.currentTarget.clientWidth;\n    if (percentage < 80) setShowCases(!showCases);\n  }\n\n  return (\n    <Flex direction={\"column\"}>\n      <Box my={2}>\n        <HStack\n          mb={2}\n          cursor={\"pointer\"}\n          transition={\"padding-left 0.1s\"}\n          _hover={{\n            borderLeft: \"2px\",\n            borderColor: `${borderColor}`,\n            paddingLeft: \"5px\",\n          }}\n          onClick={(event) => handleCasesToggleClick(event)}\n        >\n          <Box>{name === \"mainGroup\" ? \"Sin Grupo\" : name}</Box>\n          <Spacer />\n          {name !== \"Sin Grupo\" && (\n            <>\n              <Tooltip\n                label={\n                  \"Estos serán los puntos que obtendrá el usuario si resuelve correctamente el grupo\"\n                }\n              >\n                <Badge colorScheme={defined ? \"green\" : \"blue\"} size={\"sm\"}>\n                  {isLargeScreen ? (\n                    <span> {parseFloat(\"\" + points).toFixed(2) + \" pts\"}</span>\n                  ) : (\n                    <span>{points && Math.round(points)} </span>\n                  )}\n                </Badge>\n              </Tooltip>\n\n              <Menu isLazy>\n                <MenuButton\n                  as={IconButton}\n                  icon={<Dots />}\n                  size={\"sm\"}\n                  syle={{ zIndex: 99 }}\n                />\n                <MenuList>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenEdit}>\n                    Editar Grupo\n                  </MenuItem>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenRemove}>\n                    Eliminar Grupo\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n              <EditGroup {...props} isOpen={isOpenEdit} onClose={onCloseEdit} />\n              <DeleteGroup\n                isOpen={isOpenRemove}\n                onClose={onCloseRemove}\n                groupId={groupId}\n              />\n            </>\n          )}\n        </HStack>\n        <Divider />\n      </Box>\n      <Box ml={2}>\n        {caseState &&\n          showCases &&\n          caseState.cases.map((element) => (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              style={{ display: \"inline-block\" }}\n              key={element.caseId}\n            >\n              <CaseItem {...element} shouldShowPoints={name === \"Sin Grupo\"} />\n            </motion.div>\n          ))}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default GroupItem;\n","import * as React from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport {\n  Box,\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport GroupItem from \"./GroupItem\";\n\nconst Navigation = () => {\n  const caseState = useStoreState((state) => state.cases.data);\n\n  return (\n    <>\n      <Box mt={2}>\n        {caseState.map((group) => (\n          <GroupItem {...group} key={group.groupId} />\n        ))}\n      </Box>\n    </>\n  );\n};\n\nexport default Navigation;\n","import * as React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport RSelect from \"react-select\";\nimport { uuid } from \"uuidv4\";\n\ninterface PropTypes {\n  onClose: () => void;\n}\n\n// TODO handle logic for no group cases\n\nconst AddCaseModal = ({ onClose }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(true);\n  const [selectedValue, setSelectedValue] = useState(\"\");\n  const [hasGroup, setHasGroup] = useState(false);\n\n  const caseName = useRef<string>(\"\");\n  const points = useRef<number>(50);\n  const pointsDefined = useRef<boolean>(false);\n\n  const addCase = useStoreActions((actions) => actions.cases.addCase);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  let options = groupData.map((groupElement) => {\n    return {\n      value: groupElement.groupId,\n      label: groupElement.name,\n    };\n  });\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    let selectedGroupId = selectedValue;\n\n    if (selectedGroupId === \"\") {\n      selectedGroupId = options[0].value;\n    }\n\n    groupData.forEach((groupElement) => {\n      if (groupElement.groupId === selectedGroupId) {\n        groupElement.cases.forEach((caseElement) => {\n          if (caseElement.name === caseName.current) {\n            isValid = false;\n            return;\n          }\n        });\n      }\n      if (!isValid) return;\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear caso\",\n        description:\n          \"No puedes tener casos con el mismo nombre en un mismo grupo\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addCase({\n      caseId: uuid(),\n      name: caseName.current,\n      groupId: selectedGroupId,\n      points: points.current,\n      defined: pointsDefined.current,\n    });\n\n    onClose();\n  }\n\n  function handleSelectChange(event: any) {\n    setSelectedValue(event.value);\n    setHasGroup(event.value !== options[0].value);\n  }\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del caso</FormLabel>\n        <Input onChange={(e) => (caseName.current = e.target.value)} />\n      </FormControl>\n      <FormControl mt={5} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <RSelect\n          defaultValue={{ label: \"Sin Grupo\", value: options[0].value }}\n          options={options}\n          value={options.find((obj) => obj.value === selectedValue)}\n          onChange={handleSelectChange}\n        />\n      </FormControl>\n      {!hasGroup && (\n        <FormControl mt={5}>\n          <FormLabel> Puntaje </FormLabel>\n          <NumberInput\n            onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n            min={0}\n            max={100}\n            isDisabled={autoPoints}\n          >\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n          {autoPoints && (\n            <FormHelperText>\n              El programa calculará automáticamente el puntaje\n            </FormHelperText>\n          )}\n          <Checkbox\n            mt={3}\n            isChecked={autoPoints}\n            onChange={() => {\n              setAutoPoints(!autoPoints);\n              pointsDefined.current = autoPoints;\n            }}\n          >\n            Puntaje automático\n          </Checkbox>\n        </FormControl>\n      )}\n      <Button colorScheme=\"green\" isFullWidth mt={10} type=\"submit\">\n        Agregar Caso\n      </Button>\n    </form>\n  );\n};\n\nexport default AddCaseModal;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\nimport { uuid } from \"uuidv4\";\n\ninterface PropTypes {\n  onClose: () => void;\n}\n\nconst AddGroupModal = ({ onClose }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(true);\n\n  const groupName = useRef<string>(\"\");\n  const points = useRef<number>(50);\n  const pointsDefined = useRef<boolean>(false);\n\n  const addGroup = useStoreActions((actions) => actions.cases.addGroup);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === groupName.current) {\n        isValid = false;\n        return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addGroup({\n      groupId: uuid(),\n      name: groupName.current,\n      points: points.current,\n      defined: pointsDefined.current,\n      cases: [],\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Input onChange={(e) => (groupName.current = e.target.value)} />\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            pointsDefined.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Agregar Problema\n      </Button>\n    </form>\n  );\n};\n\nexport default AddGroupModal;\n","import * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Add = ({ isOpen, onClose }: PropTypes) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Agregar </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Tabs size={\"sm\"}>\n            <TabList>\n              <Tab> Caso </Tab>\n              <Tab> Grupo </Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <AddCaseModal onClose={onClose} submitButton={\"Agregar\"} />\n              </TabPanel>\n              <TabPanel>\n                <AddGroupModal\n                  onClose={onClose}\n                  submitButton={\"Agregar\"}\n                  edit={false}\n                />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default Add;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Spacer,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport Navigation from \"./Navigation\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Add from \"./Add\";\nconst Sidebar = () => {\n  const divBorderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n\n  const {\n    isOpen: isOpenAdd,\n    onOpen: onOpenAdd,\n    onClose: onCloseAdd,\n  } = useDisclosure();\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  return (\n    <motion.div initial={{ opacity: 0, x: -50 }} animate={{ opacity: 1, x: 0 }}>\n      <Box\n        w={\"100%\"}\n        h={\"75vh\"}\n        borderRight={\"1px\"}\n        borderColor={divBorderColor}\n      >\n        <Box width={\"90%\"}>\n          <Flex align={\"center\"} mb={4}>\n            <Text mr={5} fontSize={\"xl\"} fontWeight={\"bold\"}>\n              Grupos\n            </Text>\n            <Spacer />\n            <Button size={\"sm\"} colorScheme={\"green\"} onClick={onOpenAdd}>\n              {isLargeScreen ? <p> Agregar</p> : <p> + </p>}\n            </Button>\n            <Add isOpen={isOpenAdd} onClose={onCloseAdd} />\n          </Flex>\n          <Divider />\n          <Navigation />\n        </Box>\n      </Box>\n    </motion.div>\n  );\n};\n\nexport default Sidebar;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport RSelect from \"react-select\";\n\ninterface PropTypes extends ICase {\n  onClose: () => void;\n}\nconst EditCaseModal = (props: PropTypes) => {\n  const { groupId, caseId, name, points, defined, onClose } = props;\n\n  const [autoPoints, setAutoPoints] = useState(!defined);\n  const [selectedValue, setSelectedValue] = useState(groupId);\n\n  const nameRef = useRef<string>(name);\n  const pointsRef = useRef<number>(points);\n  const definedRef = useRef<boolean>(defined);\n\n  const editCase = useStoreActions((actions) => actions.cases.editCase);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  let options = groupData.map((groupElement) => {\n    return {\n      value: groupElement.groupId,\n      label: groupElement.name,\n    };\n  });\n\n  const [hasGroup, setHasGroup] = useState(groupId !== options[0].value);\n\n  // Tengo que quitarlo primero del grupo donde estaba antes\n  // Tengo que agregarlo al nuevo grupo\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    let selectedGroupId = selectedValue;\n\n    if (selectedGroupId === \"\") {\n      selectedGroupId = options[0].value;\n    }\n\n    groupData.forEach((groupElement) => {\n      if (groupElement.groupId === groupId) {\n        groupElement.cases.forEach((caseElement) => {\n          if (\n            caseElement.name === nameRef.current &&\n            nameRef.current !== name\n          ) {\n            isValid = false;\n            return;\n          }\n        });\n        if (!isValid) return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    console.log(nameRef.current);\n\n    // cambiar el selected\n    editCase({\n      case: {\n        caseId: caseId,\n        name: nameRef.current,\n        points: pointsRef.current,\n        groupId: selectedGroupId,\n        defined: definedRef.current,\n      },\n      lastId: groupId,\n    });\n\n    onClose();\n  }\n\n  function handleSelectChange(event: any) {\n    setSelectedValue(event.value);\n    setHasGroup(event.value !== options[0].value);\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del caso</FormLabel>\n        <Input\n          onChange={(e) => (nameRef.current = e.target.value)}\n          defaultValue={name}\n        />\n      </FormControl>\n      <FormControl mt={5} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <RSelect\n          defaultValue={options.find((obj) => obj.value === groupId)}\n          options={options}\n          value={options.find((obj) => obj.value === selectedValue)}\n          onChange={handleSelectChange}\n        />\n      </FormControl>\n      {!hasGroup && (\n        <FormControl mt={5}>\n          <FormLabel> Puntaje </FormLabel>\n          <NumberInput\n            onChange={(e, valueAsNumber) => (pointsRef.current = valueAsNumber)}\n            defaultValue={points}\n            min={0}\n            max={100}\n            isDisabled={autoPoints}\n          >\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n          {autoPoints && (\n            <FormHelperText>\n              El programa calculará automáticamente el puntaje\n            </FormHelperText>\n          )}\n          <Checkbox\n            mt={3}\n            isChecked={autoPoints}\n            onChange={() => {\n              setAutoPoints(!autoPoints);\n              definedRef.current = autoPoints;\n            }}\n          >\n            Puntaje automático\n          </Checkbox>\n        </FormControl>\n      )}\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Editar Caso\n      </Button>\n    </form>\n  );\n};\n\nexport default EditCaseModal;\n","import * as React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport EditGroupModal from \"./EditGroupModal\";\nimport EditCaseModal from \"./EditCaseModal\";\n\ninterface PropTypes extends ICase {\n  isOpen: boolean;\n  onClose: () => void;\n}\nconst EditCase = (props: PropTypes) => {\n  const { isOpen, onClose } = props;\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Editar Caso </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mb={5}>\n          <EditCaseModal {...props} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditCase;\n","import * as React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupId: string;\n  caseId: string;\n}\n\nconst DeleteItem = (props: PropTypes) => {\n  const { isOpen, onClose, groupId, caseId } = props;\n\n  const toast = useToast();\n\n  const removeCase = useStoreActions((actions) => actions.cases.removeCase);\n\n  function deleteCase() {\n    toast({\n      title: \"Caso borrado\",\n      description: \"El caso ha sido borrado exitosamente\",\n      status: \"success\",\n      isClosable: true,\n    });\n\n    removeCase({\n      caseId: caseId,\n      groupId: groupId,\n    });\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Borrar Caso</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar este caso? Este cambio no se puede\n          deshacer\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => deleteCase()}\n          >\n            Borrar Caso\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DeleteItem;\n","import * as React from \"react\";\nimport { useStoreState } from \"../../../Redux/Store\";\nimport {\n  Divider,\n  HStack,\n  Text,\n  Spacer,\n  Button,\n  useDisclosure,\n  Box,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"../Sidebar/AddCaseModal\";\nimport EditGroup from \"../Sidebar/EditGroup\";\nimport Line from \"./Line\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\nimport EditCase from \"../Sidebar/EditCase\";\nimport DeleteItem from \"../Sidebar/DeleteItem\";\n\nconst Navbar = () => {\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenRemove,\n    onOpen: onOpenRemove,\n    onClose: onCloseRemove,\n  } = useDisclosure();\n\n  const selectedCase = useStoreState((state) => state.cases.selected);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const emptyObject = {\n    name: \"None\",\n    caseId: \"None\",\n    groupId: \"None\",\n    points: 0,\n    defined: false,\n  };\n  const [selectedCaseData, setSelectedCaseData] = useState<ICase>(emptyObject);\n\n  const selectedGroupNameRef = useRef(\"\");\n\n  useEffect(() => {\n    const groupState = groupData.find(\n      (groupElement) => groupElement.groupId === selectedCase.groupId\n    );\n    selectedGroupNameRef.current = groupState ? groupState.name : \"None\";\n\n    const caseState = groupState?.cases.find(\n      (caseElement) => caseElement.caseId === selectedCase.caseId\n    );\n\n    if (caseState) {\n      setSelectedCaseData(caseState);\n    }\n  }, [selectedCase]);\n\n  return (\n    <Box mb={2}>\n      <HStack h={\"20%\"} w={\"100%\"} pl={5}>\n        <Text fontWeight={\"bold\"} fontSize={20}>\n          {selectedCaseData.name}\n        </Text>\n        <h2> {selectedGroupNameRef.current}</h2>\n        <Spacer />\n        <Button size={\"sm\"} onClick={onOpenEdit}>\n          Editar Caso\n        </Button>\n        <Button size={\"sm\"} onClick={onOpenRemove}>\n          {\" \"}\n          Eliminar Caso{\" \"}\n        </Button>\n      </HStack>\n      <EditCase\n        isOpen={isOpenEdit}\n        onClose={onCloseEdit}\n        {...selectedCaseData}\n      />\n      <DeleteItem\n        isOpen={isOpenRemove}\n        onClose={onCloseRemove}\n        groupId={selectedCase.groupId}\n        caseId={selectedCase.caseId}\n      />\n    </Box>\n  );\n};\n\nexport default Navbar;\n","import * as React from \"react\";\nimport {\n  Input,\n  Editable,\n  Flex,\n  EditablePreview,\n  EditableInput,\n  Box,\n  HStack,\n  Select,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { DeleteIcon, DragHandleIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { useState } from \"react\";\n\ninterface PropTypes {\n  hide?: boolean;\n}\nconst Line = ({ hide = false }: PropTypes) => {\n  const [mode, setMode] = useState(\"line\");\n\n  return (\n    <Box\n      w={\"100%\"}\n      h={mode === \"multiline\" ? \"100px\" : \"40px\"}\n      p={5}\n      border={\"1px solid rgba(5,5,5,0.1)\"}\n      borderRadius={5}\n    >\n      <HStack w={\"100%\"} h={\"100%\"}>\n        <DragHandleIcon />\n        {!hide && (\n          <Editable defaultValue={\"Nombre\"}>\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n        )}\n        {mode === \"multiline\" ? (\n          <Textarea size={\"sm\"} h={\"100%\"} w={\"100%\"} />\n        ) : (\n          <Input\n            isFullWidth\n            size={\"sm\"}\n            disabled={mode === \"array\" || mode === \"matrix\"}\n          />\n        )}\n        {!hide && (\n          <Select\n            size={\"sm\"}\n            w={\"240px\"}\n            onChange={(e) => setMode(e.currentTarget.value)}\n          >\n            <option value={\"line\"}> Linea </option>\n            <option value={\"multiline\"}> Multiple Lineas </option>\n            <option value={\"array\"}> Arreglo </option>\n            <option value={\"matrix\"}> Matriz </option>\n          </Select>\n        )}\n        {(mode === \"array\" || mode === \"matrix\") && (\n          <EditIcon cursor={\"pointer\"} />\n        )}\n        <DeleteIcon cursor={\"pointer\"} />\n      </HStack>\n    </Box>\n  );\n};\n\nexport default Line;\n","import * as React from \"react\";\nimport Line from \"./Line\";\nimport { Flex, VStack } from \"@chakra-ui/react\";\n\nconst InputLines = () => {\n  return (\n    <VStack ml={5}>\n      <Line />\n      <Line />\n      <Line hide />\n      <Line />\n      <Line />\n    </VStack>\n  );\n};\n\nexport default InputLines;\n","import * as React from \"react\";\nimport Navbar from \"./Navbar\";\nimport Line from \"./Line\";\nimport { Box, Divider, Flex } from \"@chakra-ui/react\";\nimport InputLines from \"./InputLines\";\n\nconst Input = () => {\n  return (\n    <Box w={\"100%\"} h={\"100%\"}>\n      <Navbar />\n      <Divider mb={4} />\n      <InputLines />\n    </Box>\n  );\n};\n\nexport default Input;\n","import * as React from \"react\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport { HStack, Flex, Box } from \"@chakra-ui/react\";\nimport Input from \"./Input/Input\";\n\nconst Main = () => {\n  return (\n    <Flex>\n      <Box w={\"30%\"}>\n        <Sidebar />\n      </Box>\n      <Input />\n    </Flex>\n  );\n};\n\nexport default Main;\n","import * as React from \"react\";\nimport { Container, HStack } from \"@chakra-ui/react\";\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\nimport { BiCodeBlock as CodeIcon } from \"react-icons/bi\";\nimport { BsPencil as EditIcon } from \"react-icons/bs\";\nimport { IoMdCheckmarkCircleOutline as CheckIcon } from \"react-icons/io\";\nimport Sidebar from \"./Cases/Sidebar/Sidebar\";\nimport Main from \"./Cases/Main\";\n\nconst MainWindow = () => {\n  return (\n    <>\n      <Container maxW={\"container.lg\"} mt={3} h={\"80vh\"} padding={\"0\"}>\n        <Tabs variant={\"enclosed\"} size={\"sm\"} isLazy={true}>\n          <TabList>\n            <Tab>\n              <HStack>\n                <CodeIcon />\n                <p>Código Solución</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <CheckIcon />\n                <p>Casos de Prueba</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <EditIcon />\n                <p>Redacción</p>\n              </HStack>\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>1</TabPanel>\n            <TabPanel>\n              <Main />\n            </TabPanel>\n            <TabPanel>3</TabPanel>\n          </TabPanels>\n        </Tabs>\n        {/*<Sidebar />*/}\n      </Container>\n    </>\n  );\n};\n\nexport default MainWindow;\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { useStoreRehydrated } from \"easy-peasy\";\nimport Navbar from \"./Components/Navbar\";\nimport Header from \"./Components/Header\";\nimport MainWindow from \"./Components/MainWindow\";\n\nexport const App = () => {\n  const isRehydrated = useStoreRehydrated();\n\n  return (\n    <ChakraProvider theme={theme}>\n      {!isRehydrated ? (\n        <h1> Loading </h1>\n      ) : (\n        <>\n          <Navbar />\n          <Header />\n          <MainWindow />\n        </>\n      )}\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./Redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store={store}>\n      <ColorModeScript />\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}