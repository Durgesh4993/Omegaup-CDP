{"version":3,"sources":["ColorModeSwitcher.tsx","Assets/Images/logoDark.png","Assets/Images/logoLight.png","Components/Navbar.tsx","Redux/Models/TitleModel.ts","Redux/Models/CasesModel.ts","Redux/Store.ts","Redux/Models/InputModel.ts","Components/Header.tsx","Components/Cases/Sidebar/CaseItem.tsx","Components/Cases/Sidebar/EditGroupModal.tsx","Components/Cases/Sidebar/EditGroup.tsx","Components/Cases/Sidebar/DeleteGroup.tsx","Components/Cases/Sidebar/GroupItem.tsx","Components/Cases/Sidebar/Navigation.tsx","Util/chakraColors.ts","Components/Cases/Sidebar/AddCaseModal.tsx","Components/Cases/Sidebar/AddGroupModal.tsx","Components/Cases/Sidebar/Add.tsx","Components/Cases/Input/LayoutLine.tsx","Components/Cases/Input/LayoutLines.tsx","Components/Cases/Input/LayoutDrawer.tsx","Components/Cases/Sidebar/Sidebar.tsx","Components/Cases/Sidebar/EditCaseModal.tsx","Components/Cases/Sidebar/EditCase.tsx","Components/Cases/Sidebar/DeleteItem.tsx","Components/Cases/Input/DeleteLinesModal.tsx","Components/Cases/Input/TopBar.tsx","Components/Cases/Input/ArrayGenDrawer.tsx","Components/Cases/Input/MatrixGenDrawer.tsx","Components/Cases/Input/Line.tsx","Hooks/useInputPage.ts","Components/Cases/Input/InputWindow.tsx","Hooks/useSelectedData.ts","Assets/Images/sloth.png","Components/Cases/Input/Input.tsx","Components/Cases/Main.tsx","Components/Writing/Markdown/Parser.ts","Components/Writing/Display.tsx","Components/Writing/WritingWindow.tsx","Components/MainWindow.tsx","Pages/RawArray.tsx","Pages/RawMatrix.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Navbar","logo","light","dark","boxShadow","maxW","align","height","w","src","mr","label","TitleModel","titleName","setTitleName","action","state","payload","calculatePoints","maxPoints","notDefinedCount","forEach","element","name","cases","caseElement","defined","points","individualPoints","map","CasesModel","data","groupId","uuid","selected","caseId","selectedData","computed","groupState","find","groupElement","groupName","caseState","caseData","addGroup","push","editGroup","groupIndex","findIndex","undefined","removeGroup","filter","addCase","editCase","case","lastId","newGroup","caseIndex","removeCase","setSelected","globalModel","title","input","layout","hidden","lastCreated","addData","inputPage","removeData","id","inputElement","addLine","lineGroup","_","isEqual","caseIdentifier","lines","line","lineId","setLines","lineArray","removeLine","lineElement","removeAllLines","lineData","updateLine","lineIndex","setLineArrayData","arrayData","setLineMatrixData","matrixData","setHidden","hide","setLayout","addLayoutLine","updateLayoutLine","lineToUpdate","type","removeLayoutLine","handleGroupChange","newGroupId","GlobalStore","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Header","titleText","setTitleText","actions","useState","isEditTitleActive","setIsEditTitleActive","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","mt","defaultValue","fontWeight","placeholder","onEdit","onSubmit","event","value","onCancel","width","colorScheme","leastDestructiveRef","isCentered","ref","ml","sessionStorage","clear","window","location","reload","CaseItem","shouldShowPoints","setSelectedCase","selectedCase","isActive","toFixed","React","AddGroupModal","autoPoints","setAutoPoints","nameRef","pointsRef","definedRef","groupData","toast","useToast","e","preventDefault","isValid","current","description","status","isClosable","handleSubmit","isRequired","onChange","target","valueAsNumber","min","max","isDisabled","isChecked","isFullWidth","EditGroup","mb","EditGroupModal","DeleteGroup","GroupItem","showCases","setShowCases","borderColor","isLargeScreen","useMediaPredicate","isOpenEdit","onOpenEdit","onCloseEdit","isOpenRemove","onOpenRemove","onCloseRemove","direction","my","cursor","transition","_hover","borderLeft","paddingLeft","pageX","currentTarget","offsetLeft","clientWidth","handleCasesToggleClick","parseFloat","Math","round","isLazy","as","IconButton","syle","zIndex","ChevronDown","ChevronUp","motion","div","initial","opacity","y","animate","style","display","Navigation","group","key","colors","transparent","black","white","whiteAlpha","50","100","200","300","400","500","600","700","800","900","blackAlpha","gray","red","orange","yellow","green","teal","blue","cyan","purple","pink","linkedin","facebook","messenger","whatsapp","twitter","telegram","AddCaseModal","selectedValue","setSelectedValue","hasGroup","setHasGroup","caseName","pointsDefined","darkTheme","options","selectedGroupId","obj","theme","primary","chakraColors","primary25","primary50","primary75","neutral0","neutral5","neutral10","neutral20","neutral30","neutral40","neutral50","neutral80","neutral90","Add","submitButton","edit","LayoutLine","provided","setMode","typeRef","labelRef","deleteLine","handleUpdateLine","newLabel","children","innerHTML","p","border","borderRadius","h","dragHandleProps","DragHandle","isTruncated","textOverflow","minW","handleSelectChange","Delete","LayoutLines","isLeft","onDragEnd","result","destination","startIndex","source","index","endIndex","newArray","Array","from","splice","removed","handleDragEnd","droppableId","snapshot","droppableProps","innerRef","draggableId","isDragging","draggableProps","offset","x","innerWidth","left","top","LayoutDrawer","placement","displayWritingButton","selectedInputData","whiteSpace","overflowWrap","mappedLines","loadCurrentLayout","Sidebar","divBorderColor","isOpenAdd","onOpenAdd","onCloseAdd","isOpenLayout","onOpenLayout","onCloseLayout","borderRight","EditCaseModal","EditCase","DeleteItem","selectCase","DeleteLinesModal","deleteAllLines","TopBar","isOpenLines","onOpenLines","onCloseLines","addPage","selectedLines","pl","pr","checked","layoutNewIds","layoutElement","newCaseName","newCaseId","i","newIdLines","ArrayGenDrawer","arrayValue","setArrayValue","distinct","setDistinct","valid","setValid","sizeRef","minValueRef","maxValueRef","updateArrayData","handleGenerateArray","parseInt","minValue","maxValue","generatedArray","arrayValues","Set","randomValue","Infinity","floor","random","has","add","generateArray","required","isInvalid","to","localArrayVal","anyFails","arraySplitted","split","parsedValue","length","console","log","checkValidity","getRandom","matrixValue","setMatrixValue","rowsRef","colsRef","updateMatrixData","rows","cols","newMatrix","columns","generatedMatrix","rowValues","columnValues","fill","j","randomNumber","generateMatrix","Line","showInput","mode","inputRef","useEffect","focus","onBlur","onKeyPress","blur","handleEnterPress","disabled","substring","renderSwitch","Edit","MatrixGenDrawer","prevState","nextState","useInputPage","pageData","setPageData","inputData","addInputPage","InputWindow","addLineToStore","useCallback","useSelectedData","emptyObject","setGroupName","setCaseData","objectData","Input","sloth","href","Main","splitBetweenTwo","firstOccurrence","secondOccurrence","trim","slice","markdownHtml","parser","MarkdownIt","html","use","markdownMath","engine","katex","delimiters","sanitizedInput","sanitizeMarkdown","allowedTags","firstGlobalIndex","lastGlobalIndex","occurrences","first","second","iterator","row","inputTable","reduce","finalIndex","getLines","finalTableOutput","join","sanitizedArray","firstPart","secondPart","finalString","render","replaceAll","parse","Display","divRef","className","WritingWindow","MainWindow","padding","RawArray","useParams","useClipboard","hasCopied","onCopy","Copy","RawMatrix","App","isRehydrated","useStoreRehydrated","path","exact","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.1d63f575.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logoDark.406064cb.png\";","export default __webpack_public_path__ + \"static/media/logoLight.d4263283.png\";","import * as React from \"react\";\nimport {\n  Box,\n  Spacer,\n  Flex,\n  Image,\n  Container,\n  Tooltip,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\nimport dark from \"../Assets/Images/logoDark.png\";\nimport light from \"../Assets/Images/logoLight.png\";\n\nconst Navbar = () => {\n  const logo = useColorModeValue(light, dark);\n  return (\n    <Box boxShadow={\"md\"}>\n      <Container maxW={\"container.lg\"}>\n        <Flex align={\"center\"} height={\"38px\"}>\n          <Box w={\"86px\"}>\n            <Image w={\"100px\"} src={logo} />\n          </Box>\n          <Spacer />\n          <Box mr={5}>\n            <ColorModeSwitcher />\n          </Box>\n          <Box>\n            <Tooltip\n              label={\"Colabora con nosotros en Github!\"}\n              aria-label={\"Colabora\"}\n            >\n              <span>\n                <AiFillGithub size={25} />\n              </span>\n            </Tooltip>\n          </Box>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Navbar;\n","import { action, Action } from \"easy-peasy\";\n\nexport interface ITitleModel {\n  titleName: string;\n  setTitleName: Action<ITitleModel, string>;\n}\n\nconst TitleModel = <ITitleModel>{\n  titleName: \"Nuevo Problema\",\n  setTitleName: action((state, payload) => {\n    state.titleName = payload;\n  }),\n};\n\nexport default TitleModel;\n","import { action, Action, Computed, computed } from \"easy-peasy\";\nimport { uuid } from \"uuidv4\";\n\nexport interface IGroup {\n  groupId: string;\n  name: string;\n  points: number;\n  defined: boolean;\n  cases: ICase[];\n}\n\nexport interface ICase {\n  caseId: string;\n  name: string;\n  groupId: string;\n  points: number;\n  defined: boolean;\n}\n\ninterface caseIndentifier {\n  groupId: string;\n  caseId: string;\n}\n\nexport interface ICasesModel {\n  data: IGroup[];\n  selected: caseIndentifier;\n  selectedData: Computed<\n    ICasesModel,\n    (groupId: string, caseId: string) => { groupName: string; caseData: ICase }\n  >;\n\n  addGroup: Action<ICasesModel, IGroup>;\n  editGroup: Action<ICasesModel, IGroup>;\n  removeGroup: Action<ICasesModel, string>;\n\n  addCase: Action<ICasesModel, ICase>;\n  editCase: Action<ICasesModel, { case: ICase; lastId: string }>;\n  removeCase: Action<ICasesModel, caseIndentifier>;\n\n  setSelected: Action<ICasesModel, caseIndentifier>;\n}\n\nfunction calculatePoints(state: IGroup[]) {\n  let maxPoints = 100;\n  let notDefinedCount = 0;\n\n  state.forEach((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases.forEach((caseElement) => {\n        if (caseElement.defined) {\n          maxPoints -= caseElement.points ? caseElement.points : 0;\n        } else {\n          notDefinedCount++;\n        }\n      });\n    } else {\n      if (element.defined) {\n        maxPoints -= element.points ? element.points : 0;\n      } else {\n        notDefinedCount++;\n      }\n    }\n  });\n\n  let individualPoints = maxPoints / notDefinedCount;\n\n  state = state.map((element) => {\n    if (element.name === \"Sin Grupo\") {\n      element.cases = element.cases.map((caseElement) => {\n        if (!caseElement.defined) {\n          caseElement.points = individualPoints;\n        }\n        return caseElement;\n      });\n    }\n    if (!element.defined) {\n      element.points = individualPoints;\n    }\n    return element;\n  });\n\n  return state;\n}\n\nconst CasesModel = {\n  data: [\n    {\n      groupId: uuid(),\n      name: \"Sin Grupo\",\n      cases: [],\n      defined: false,\n      points: 0,\n    },\n  ],\n  selected: {\n    groupId: \"None\",\n    caseId: \"None\",\n  },\n  selectedData: computed((state) => {\n    return (groupId, caseId) => {\n      const groupState = state.data.find(\n        (groupElement) => groupElement.groupId === groupId\n      );\n\n      const groupName = groupState ? groupState.name : \"None\";\n\n      const caseState = groupState?.cases.find(\n        (caseElement) => caseElement.caseId === caseId\n      );\n\n      if (caseState) return { groupName: groupName, caseData: caseState };\n    };\n  }),\n  addGroup: action((state, payload) => {\n    state.data.push(payload);\n    state.data = calculatePoints(state.data);\n  }),\n  editGroup: action((state, payload) => {\n    const groupIndex = state.data.findIndex(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n\n    if (groupIndex !== undefined) state.data[groupIndex] = payload;\n\n    state.data = calculatePoints(state.data);\n  }),\n  removeGroup: action((state, payload) => {\n    state.data = state.data.filter((element) => {\n      return element.groupId !== payload;\n    });\n    state.data = calculatePoints(state.data);\n  }),\n  addCase: action((state, payload) => {\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n    groupState?.cases.push(payload);\n    state.data = calculatePoints(state.data);\n  }),\n  editCase: action((state, payload) => {\n    const { case: caseData, lastId } = payload;\n\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === lastId\n    );\n\n    if (lastId !== caseData.groupId) {\n      if (groupState) {\n        groupState.cases = groupState.cases.filter(\n          (caseElement) => caseElement.caseId !== caseData.caseId\n        );\n      }\n\n      const newGroup = state.data.find(\n        (groupElement) => groupElement.groupId === caseData.groupId\n      );\n\n      newGroup?.cases.push(caseData);\n      state.data = calculatePoints(state.data);\n      return;\n    }\n\n    const caseIndex = groupState?.cases.findIndex(\n      (caseElement) => caseElement.caseId === caseData.caseId\n    );\n\n    if (groupState !== undefined && caseIndex !== undefined) {\n      groupState.cases[caseIndex] = caseData;\n    }\n\n    state.data = calculatePoints(state.data);\n  }),\n\n  removeCase: action((state, payload) => {\n    const groupState = state.data.find(\n      (groupElement) => groupElement.groupId === payload.groupId\n    );\n\n    if (groupState !== undefined) {\n      groupState.cases = groupState.cases.filter(\n        (caseElement) => caseElement.caseId !== payload.caseId\n      );\n    }\n    state.data = calculatePoints(state.data);\n  }),\n  setSelected: action((state, payload) => {\n    state.selected = payload;\n  }),\n} as ICasesModel;\n\nexport default CasesModel;\n","import title, { ITitleModel } from \"./Models/TitleModel\";\nimport cases, { ICasesModel } from \"./Models/CasesModel\";\nimport input, { IInputModel } from \"./Models/InputModel\";\n\nimport { createStore, createTypedHooks, persist } from \"easy-peasy\";\n\nconst globalModel = {\n  title,\n  cases,\n  input,\n};\n\ninterface IGlobalModel {\n  title: ITitleModel;\n  cases: ICasesModel;\n  input: IInputModel;\n}\n\nconst GlobalStore = createStore(persist(globalModel));\nexport default GlobalStore;\n\nconst typedHooks = createTypedHooks<IGlobalModel>();\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import { action, Action, computed, Computed } from \"easy-peasy\";\nimport _ from \"lodash\";\n\nexport interface IArrayData {\n  size: number;\n  minValue: number;\n  maxValue: number;\n  distinct: boolean;\n  value: string;\n}\n\nexport interface IMatrixData {\n  rows: number;\n  columns: number;\n  minValue: number;\n  maxValue: number;\n  distinct: \"row\" | \"column\" | \"all\" | \"none\";\n  value: string;\n}\nexport interface ILine {\n  lineId: string;\n  type: \"line\" | \"multiline\" | \"array\" | \"matrix\";\n  label: string;\n  value: string;\n  arrayData: IArrayData | undefined;\n  matrixData: IMatrixData | undefined;\n}\n\nexport interface IInput {\n  id: caseIdentifier;\n  lines: ILine[];\n}\n\nexport interface caseIdentifier {\n  groupId: string;\n  caseId: string;\n}\n\nexport interface IInputModel {\n  data: IInput[];\n  layout: ILine[] | undefined;\n  hidden: boolean;\n  lastCreated: string;\n\n  addData: Action<IInputModel, IInput>;\n  removeData: Action<IInputModel, caseIdentifier>;\n\n  addLine: Action<IInputModel, { caseIdentifier: caseIdentifier; line: ILine }>;\n  setLines: Action<\n    IInputModel,\n    {\n      caseIdentifier: caseIdentifier;\n      lineArray: ILine[];\n    }\n  >;\n  removeLine: Action<\n    IInputModel,\n    { caseIdentifier: caseIdentifier; lineId: string }\n  >;\n  removeAllLines: Action<IInputModel, caseIdentifier>;\n  lineData: Computed<\n    IInputModel,\n    (caseIdentifier: caseIdentifier, lineId: string) => ILine\n  >;\n  updateLine: Action<\n    IInputModel,\n    { caseIdentifier: caseIdentifier; lineId: string; lineData: ILine }\n  >;\n  handleGroupChange: Action<\n    IInputModel,\n    { caseId: string; newGroupId: string }\n  >;\n  setLineArrayData: Action<\n    IInputModel,\n    { caseIdentifier: caseIdentifier; lineId: string; arrayData: IArrayData }\n  >;\n  setLineMatrixData: Action<\n    IInputModel,\n    { caseIdentifier: caseIdentifier; lineId: string; matrixData: IMatrixData }\n  >;\n  setHidden: Action<IInputModel, boolean>;\n\n  setLayout: Action<IInputModel, ILine[]>;\n  addLayoutLine: Action<IInputModel, ILine>;\n  updateLayoutLine: Action<IInputModel, ILine>;\n  removeLayoutLine: Action<IInputModel, string>;\n}\n\nconst InputModel = {\n  data: [],\n  layout: [],\n  hidden: false,\n  lastCreated: \"\",\n\n  addData: action((state, inputPage) => {\n    state.data.push(inputPage);\n  }),\n  removeData: action((state, id) => {\n    state.data.filter((inputElement) => {\n      return inputElement.id !== id;\n    });\n  }),\n  addLine: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, payload.caseIdentifier)\n    );\n    lineGroup?.lines.push(payload.line);\n    state.lastCreated = payload.line.lineId;\n  }),\n  setLines: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, payload.caseIdentifier)\n    );\n\n    if (lineGroup !== undefined) {\n      lineGroup.lines = payload.lineArray;\n    }\n  }),\n  removeLine: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, payload.caseIdentifier)\n    );\n    if (lineGroup !== undefined) {\n      lineGroup.lines = lineGroup?.lines.filter(\n        (lineElement) => lineElement.lineId !== payload.lineId\n      );\n    }\n  }),\n  removeAllLines: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(payload, inputElement.id)\n    );\n\n    if (lineGroup !== undefined) {\n      lineGroup.lines = [];\n    }\n  }),\n  lineData: computed((state) => {\n    return (caseIdentifier, lineId) => {\n      const lineGroup = state.data.find(\n        (inputElement) => inputElement.id === caseIdentifier\n      );\n\n      const line = lineGroup?.lines.find(\n        (lineElement) => lineElement.lineId === lineId\n      );\n\n      if (line) return line;\n    };\n  }),\n  updateLine: action((state, { caseIdentifier, lineId, lineData }) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, caseIdentifier)\n    );\n\n    const lineIndex = lineGroup?.lines.findIndex(\n      (lineElement) => lineElement.lineId === lineId\n    );\n\n    if (lineGroup !== undefined && lineIndex !== undefined) {\n      lineGroup.lines[lineIndex] = lineData;\n    }\n  }),\n  setLineArrayData: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, payload.caseIdentifier)\n    );\n\n    const line = lineGroup?.lines.find(\n      (lineElement) => lineElement.lineId === payload.lineId\n    );\n\n    if (line !== undefined) {\n      line.arrayData = payload.arrayData;\n    }\n  }),\n  setLineMatrixData: action((state, payload) => {\n    const lineGroup = state.data.find((inputElement) =>\n      _.isEqual(inputElement.id, payload.caseIdentifier)\n    );\n\n    const line = lineGroup?.lines.find(\n      (lineElement) => lineElement.lineId === payload.lineId\n    );\n\n    if (line !== undefined) {\n      line.matrixData = payload.matrixData;\n    }\n  }),\n  setHidden: action((state, hide) => {\n    state.hidden = hide;\n  }),\n\n  setLayout: action((state, layout) => {\n    state.layout = layout;\n  }),\n  addLayoutLine: action((state, payload) => {\n    state.layout?.push(payload);\n  }),\n  updateLayoutLine: action((state, payload) => {\n    const lineToUpdate = state.layout?.find(\n      (lineElement) => lineElement.lineId === payload.lineId\n    );\n    if (lineToUpdate !== undefined) {\n      lineToUpdate.label = payload.label;\n      lineToUpdate.type = payload.type;\n    }\n  }),\n  removeLayoutLine: action((state, payload) => {\n    state.layout = state.layout?.filter(\n      (lineElement) => lineElement.lineId !== payload\n    );\n  }),\n\n  handleGroupChange: action((state, { caseId, newGroupId }) => {\n    const inputPage = state.data.find(\n      (inputElement) => inputElement.id.caseId === caseId\n    );\n    if (inputPage !== undefined) {\n      inputPage.id.groupId = newGroupId;\n    }\n  }),\n} as IInputModel;\n\nexport default InputModel;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  HStack,\n  Spacer,\n  useDisclosure,\n  AlertDialogOverlay,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogBody,\n  AlertDialog,\n} from \"@chakra-ui/react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../Redux/Store\";\n\nconst Header = () => {\n  const titleText = useStoreState((state) => state.title.titleName);\n  const setTitleText = useStoreActions((actions) => actions.title.setTitleName);\n\n  const [isEditTitleActive, setIsEditTitleActive] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  function handleTitleSubmit(value: string) {\n    setIsEditTitleActive(false);\n    setTitleText(value);\n  }\n\n  function createNewProblem() {\n    sessionStorage.clear();\n    window.location.reload();\n  }\n\n  return (\n    <Container maxW={\"container.lg\"}>\n      <Box mt={\"5\"}>\n        <HStack>\n          <Editable\n            defaultValue={titleText}\n            fontSize={\"xl\"}\n            fontWeight={\"bold\"}\n            placeholder={\"Escribe el nombre del problema\"}\n            onEdit={() => setIsEditTitleActive(true)}\n            onSubmit={(event) => handleTitleSubmit(event)}\n            onCancel={() => setIsEditTitleActive(false)}\n            width={isEditTitleActive ? \"50%\" : undefined}\n          >\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n          <span>\n            <AiFillEdit />\n          </span>\n          <Spacer />\n          <Button size={\"sm\"}> Cargar Problema </Button>\n          <Button size={\"sm\"} colorScheme={\"blue\"}>\n            Guardar Problema\n          </Button>\n          <Button size={\"sm\"} colorScheme={\"orange\"} onClick={onOpen}>\n            Nuevo Problema\n          </Button>\n          <AlertDialog\n            leastDestructiveRef={cancelRef}\n            onClose={onClose}\n            isOpen={isOpen}\n            isCentered\n          >\n            <AlertDialogOverlay />\n\n            <AlertDialogContent>\n              <AlertDialogHeader>Crear nuevo problema</AlertDialogHeader>\n              <AlertDialogBody>\n                ¿Deseas crear un nuevo problema? Se borrará TODO el problema\n                anterior. Guarda el problema primero antes de crear uno nuevo.\n              </AlertDialogBody>\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={onClose}>\n                  No\n                </Button>\n                <Button\n                  colorScheme=\"red\"\n                  ml={3}\n                  onClick={() => createNewProblem()}\n                >\n                  Sí\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </HStack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { Badge, Button, HStack } from \"@chakra-ui/react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\n\ninterface PropTypes extends ICase {\n  shouldShowPoints: boolean;\n}\nconst CaseItem = (props: PropTypes) => {\n  const { name, points, caseId, groupId, defined, shouldShowPoints } = props;\n\n  const setSelectedCase = useStoreActions(\n    (actions) => actions.cases.setSelected\n  );\n  const selectedCase = useStoreState((state) => state.cases.selected);\n\n  function handleSelectedCase() {\n    setSelectedCase({ caseId: caseId, groupId: groupId });\n  }\n\n  return (\n    <Button\n      variant={\"ghost\"}\n      size={\"sm\"}\n      onClick={() => handleSelectedCase()}\n      isActive={\n        selectedCase.caseId === caseId && selectedCase.groupId === groupId\n      }\n    >\n      <HStack>\n        <span>{name}</span>\n        {shouldShowPoints && (\n          <Badge colorScheme={defined ? \"green\" : \"blue\"}>\n            {points.toFixed(2) + \" PTS\"}\n          </Badge>\n        )}\n      </HStack>\n    </Button>\n  );\n};\n\nexport default React.memo(CaseItem);\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport { uuid } from \"uuidv4\";\n\ninterface PropTypes extends IGroup {\n  onClose: () => void;\n}\n\nconst AddGroupModal = (props: PropTypes) => {\n  const { groupId, name, points, defined, onClose, cases } = props;\n\n  const [autoPoints, setAutoPoints] = useState(!defined);\n\n  const nameRef = useRef<string>(name);\n  const pointsRef = useRef<number>(points);\n  const definedRef = useRef<boolean>(defined);\n\n  const editGroup = useStoreActions((actions) => actions.cases.editGroup);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === nameRef.current && nameRef.current !== name) {\n        isValid = false;\n        return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    editGroup({\n      groupId: groupId,\n      points: pointsRef.current,\n      defined: definedRef.current,\n      name: nameRef.current,\n      cases: cases,\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Input\n          onChange={(e) => (nameRef.current = e.target.value)}\n          defaultValue={name}\n        />\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          defaultValue={points}\n          onChange={(e, valueAsNumber) => (pointsRef.current = valueAsNumber)}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            definedRef.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Agregar Problema\n      </Button>\n    </form>\n  );\n};\n\nexport default AddGroupModal;\n","import * as React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\nimport { IGroup } from \"../../../Redux/Models/CasesModel\";\nimport EditGroupModal from \"./EditGroupModal\";\n\ninterface PropTypes extends IGroup {\n  isOpen: boolean;\n  onClose: () => void;\n}\nconst EditGroup = (props: PropTypes) => {\n  const { isOpen, onClose } = props;\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Editar Grupo </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mb={5}>\n          <EditGroupModal {...props} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditGroup;\n","import * as React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupId: string;\n}\n\nconst DeleteGroup = (props: PropTypes) => {\n  const { isOpen, onClose, groupId } = props;\n\n  const toast = useToast();\n\n  const removeGroup = useStoreActions((actions) => actions.cases.removeGroup);\n\n  function deleteGroup() {\n    toast({\n      title: \"Grupo borrado\",\n      description: \"El grupo ha sido borrado exitosamente\",\n      status: \"success\",\n      isClosable: true,\n    });\n\n    removeGroup(groupId);\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Borar Grupo</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar este grupo? Este cambio no se puede\n          deshacer\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => deleteGroup()}\n          >\n            Borrar Grupo\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DeleteGroup;\n","import * as React from \"react\";\nimport {\n  Badge,\n  Box,\n  Divider,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Tooltip,\n  useColorModeValue,\n  useDisclosure,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport CaseItem from \"./CaseItem\";\nimport { useStoreState } from \"../../../Redux/Store\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport EditGroup from \"./EditGroup\";\nimport { IGroup } from \"../../../Redux/Models/CasesModel\";\nimport DeleteGroup from \"./DeleteGroup\";\nimport { ChevronDownIcon, ChevronUpIcon } from \"@chakra-ui/icons\";\n\ninterface PropTypes extends IGroup {}\n\nconst GroupItem = (props: PropTypes) => {\n  const { name, defined, points, groupId } = props;\n  const [showCases, setShowCases] = useState(\n    name === \"mainGroup\" ? true : false\n  );\n\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n  const caseState = useStoreState((state) => {\n    return state.cases.data.find((element) => element.name === name);\n  });\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenRemove,\n    onOpen: onOpenRemove,\n    onClose: onCloseRemove,\n  } = useDisclosure();\n\n  function handleCasesToggleClick(event: React.MouseEvent<HTMLDivElement>) {\n    let percentage =\n      ((event.pageX - event.currentTarget.offsetLeft) * 100) /\n      event.currentTarget.clientWidth;\n    if (percentage < 80) setShowCases(!showCases);\n  }\n\n  return (\n    <Flex direction={\"column\"}>\n      <Box my={2}>\n        <HStack\n          mb={2}\n          cursor={\"pointer\"}\n          transition={\"padding-left 0.1s\"}\n          _hover={{\n            borderLeft: \"2px\",\n            borderColor: `${borderColor}`,\n            paddingLeft: \"5px\",\n          }}\n          onClick={(event) => handleCasesToggleClick(event)}\n        >\n          <Box>{name === \"mainGroup\" ? \"Sin Grupo\" : name}</Box>\n          <Spacer />\n          {name !== \"Sin Grupo\" ? (\n            <>\n              <Tooltip\n                label={\n                  \"Estos serán los puntos que obtendrá el usuario si resuelve correctamente el grupo\"\n                }\n              >\n                <Badge colorScheme={defined ? \"green\" : \"blue\"} size={\"sm\"}>\n                  {isLargeScreen ? (\n                    <span> {parseFloat(\"\" + points).toFixed(2) + \" pts\"}</span>\n                  ) : (\n                    <span>{points && Math.round(points)} </span>\n                  )}\n                </Badge>\n              </Tooltip>\n\n              <Menu isLazy>\n                <MenuButton\n                  as={IconButton}\n                  icon={<Dots />}\n                  size={\"sm\"}\n                  syle={{ zIndex: 99 }}\n                />\n                <MenuList>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenEdit}>\n                    Editar Grupo\n                  </MenuItem>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenRemove}>\n                    Eliminar Grupo\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n              <EditGroup {...props} isOpen={isOpenEdit} onClose={onCloseEdit} />\n              <DeleteGroup\n                isOpen={isOpenRemove}\n                onClose={onCloseRemove}\n                groupId={groupId}\n              />\n            </>\n          ) : showCases ? (\n            <ChevronDownIcon />\n          ) : (\n            <ChevronUpIcon />\n          )}\n        </HStack>\n        <Divider />\n      </Box>\n      <Box ml={2}>\n        {caseState &&\n          showCases &&\n          caseState.cases.map((element) => (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              style={{ display: \"inline-block\" }}\n              key={element.caseId}\n            >\n              <CaseItem {...element} shouldShowPoints={name === \"Sin Grupo\"} />\n            </motion.div>\n          ))}\n      </Box>\n    </Flex>\n  );\n};\n\nexport default GroupItem;\n","import * as React from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport {\n  Box,\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport GroupItem from \"./GroupItem\";\n\nconst Navigation = () => {\n  const caseState = useStoreState((state) => state.cases.data);\n\n  return (\n    <>\n      <Box mt={2}>\n        {caseState.map((group) => (\n          <GroupItem {...group} key={group.groupId} />\n        ))}\n      </Box>\n    </>\n  );\n};\n\nexport default Navigation;\n","/**\n * @deprecated\n * You can derive the Colors type from the DefaultChakraTheme:\n *\n * type Colors = DefaultChakraTheme[\"colors\"]\n */\nexport type Colors = typeof colors;\n\nconst colors = {\n  transparent: \"transparent\",\n  current: \"currentColor\",\n  black: \"#000000\",\n  white: \"#FFFFFF\",\n\n  whiteAlpha: {\n    50: \"rgba(255, 255, 255, 0.04)\",\n    100: \"rgba(255, 255, 255, 0.06)\",\n    200: \"rgba(255, 255, 255, 0.08)\",\n    300: \"rgba(255, 255, 255, 0.16)\",\n    400: \"rgba(255, 255, 255, 0.24)\",\n    500: \"rgba(255, 255, 255, 0.36)\",\n    600: \"rgba(255, 255, 255, 0.48)\",\n    700: \"rgba(255, 255, 255, 0.64)\",\n    800: \"rgba(255, 255, 255, 0.80)\",\n    900: \"rgba(255, 255, 255, 0.92)\",\n  },\n\n  blackAlpha: {\n    50: \"rgba(0, 0, 0, 0.04)\",\n    100: \"rgba(0, 0, 0, 0.06)\",\n    200: \"rgba(0, 0, 0, 0.08)\",\n    300: \"rgba(0, 0, 0, 0.16)\",\n    400: \"rgba(0, 0, 0, 0.24)\",\n    500: \"rgba(0, 0, 0, 0.36)\",\n    600: \"rgba(0, 0, 0, 0.48)\",\n    700: \"rgba(0, 0, 0, 0.64)\",\n    800: \"rgba(0, 0, 0, 0.80)\",\n    900: \"rgba(0, 0, 0, 0.92)\",\n  },\n\n  gray: {\n    50: \"#F7FAFC\",\n    100: \"#EDF2F7\",\n    200: \"#E2E8F0\",\n    300: \"#CBD5E0\",\n    400: \"#A0AEC0\",\n    500: \"#718096\",\n    600: \"#4A5568\",\n    700: \"#2D3748\",\n    800: \"#1A202C\",\n    900: \"#171923\",\n  },\n\n  red: {\n    50: \"#FFF5F5\",\n    100: \"#FED7D7\",\n    200: \"#FEB2B2\",\n    300: \"#FC8181\",\n    400: \"#F56565\",\n    500: \"#E53E3E\",\n    600: \"#C53030\",\n    700: \"#9B2C2C\",\n    800: \"#822727\",\n    900: \"#63171B\",\n  },\n\n  orange: {\n    50: \"#FFFAF0\",\n    100: \"#FEEBC8\",\n    200: \"#FBD38D\",\n    300: \"#F6AD55\",\n    400: \"#ED8936\",\n    500: \"#DD6B20\",\n    600: \"#C05621\",\n    700: \"#9C4221\",\n    800: \"#7B341E\",\n    900: \"#652B19\",\n  },\n\n  yellow: {\n    50: \"#FFFFF0\",\n    100: \"#FEFCBF\",\n    200: \"#FAF089\",\n    300: \"#F6E05E\",\n    400: \"#ECC94B\",\n    500: \"#D69E2E\",\n    600: \"#B7791F\",\n    700: \"#975A16\",\n    800: \"#744210\",\n    900: \"#5F370E\",\n  },\n\n  green: {\n    50: \"#F0FFF4\",\n    100: \"#C6F6D5\",\n    200: \"#9AE6B4\",\n    300: \"#68D391\",\n    400: \"#48BB78\",\n    500: \"#38A169\",\n    600: \"#2F855A\",\n    700: \"#276749\",\n    800: \"#22543D\",\n    900: \"#1C4532\",\n  },\n\n  teal: {\n    50: \"#E6FFFA\",\n    100: \"#B2F5EA\",\n    200: \"#81E6D9\",\n    300: \"#4FD1C5\",\n    400: \"#38B2AC\",\n    500: \"#319795\",\n    600: \"#2C7A7B\",\n    700: \"#285E61\",\n    800: \"#234E52\",\n    900: \"#1D4044\",\n  },\n\n  blue: {\n    50: \"#ebf8ff\",\n    100: \"#bee3f8\",\n    200: \"#90cdf4\",\n    300: \"#63b3ed\",\n    400: \"#4299e1\",\n    500: \"#3182ce\",\n    600: \"#2b6cb0\",\n    700: \"#2c5282\",\n    800: \"#2a4365\",\n    900: \"#1A365D\",\n  },\n\n  cyan: {\n    50: \"#EDFDFD\",\n    100: \"#C4F1F9\",\n    200: \"#9DECF9\",\n    300: \"#76E4F7\",\n    400: \"#0BC5EA\",\n    500: \"#00B5D8\",\n    600: \"#00A3C4\",\n    700: \"#0987A0\",\n    800: \"#086F83\",\n    900: \"#065666\",\n  },\n\n  purple: {\n    50: \"#FAF5FF\",\n    100: \"#E9D8FD\",\n    200: \"#D6BCFA\",\n    300: \"#B794F4\",\n    400: \"#9F7AEA\",\n    500: \"#805AD5\",\n    600: \"#6B46C1\",\n    700: \"#553C9A\",\n    800: \"#44337A\",\n    900: \"#322659\",\n  },\n\n  pink: {\n    50: \"#FFF5F7\",\n    100: \"#FED7E2\",\n    200: \"#FBB6CE\",\n    300: \"#F687B3\",\n    400: \"#ED64A6\",\n    500: \"#D53F8C\",\n    600: \"#B83280\",\n    700: \"#97266D\",\n    800: \"#702459\",\n    900: \"#521B41\",\n  },\n\n  linkedin: {\n    50: \"#E8F4F9\",\n    100: \"#CFEDFB\",\n    200: \"#9BDAF3\",\n    300: \"#68C7EC\",\n    400: \"#34B3E4\",\n    500: \"#00A0DC\",\n    600: \"#008CC9\",\n    700: \"#0077B5\",\n    800: \"#005E93\",\n    900: \"#004471\",\n  },\n\n  facebook: {\n    50: \"#E8F4F9\",\n    100: \"#D9DEE9\",\n    200: \"#B7C2DA\",\n    300: \"#6482C0\",\n    400: \"#4267B2\",\n    500: \"#385898\",\n    600: \"#314E89\",\n    700: \"#29487D\",\n    800: \"#223B67\",\n    900: \"#1E355B\",\n  },\n\n  messenger: {\n    50: \"#D0E6FF\",\n    100: \"#B9DAFF\",\n    200: \"#A2CDFF\",\n    300: \"#7AB8FF\",\n    400: \"#2E90FF\",\n    500: \"#0078FF\",\n    600: \"#0063D1\",\n    700: \"#0052AC\",\n    800: \"#003C7E\",\n    900: \"#002C5C\",\n  },\n\n  whatsapp: {\n    50: \"#dffeec\",\n    100: \"#b9f5d0\",\n    200: \"#90edb3\",\n    300: \"#65e495\",\n    400: \"#3cdd78\",\n    500: \"#22c35e\",\n    600: \"#179848\",\n    700: \"#0c6c33\",\n    800: \"#01421c\",\n    900: \"#001803\",\n  },\n\n  twitter: {\n    50: \"#E5F4FD\",\n    100: \"#C8E9FB\",\n    200: \"#A8DCFA\",\n    300: \"#83CDF7\",\n    400: \"#57BBF5\",\n    500: \"#1DA1F2\",\n    600: \"#1A94DA\",\n    700: \"#1681BF\",\n    800: \"#136B9E\",\n    900: \"#0D4D71\",\n  },\n\n  telegram: {\n    50: \"#E3F2F9\",\n    100: \"#C5E4F3\",\n    200: \"#A2D4EC\",\n    300: \"#7AC1E4\",\n    400: \"#47A9DA\",\n    500: \"#0088CC\",\n    600: \"#007AB8\",\n    700: \"#006BA1\",\n    800: \"#005885\",\n    900: \"#003F5E\",\n  },\n};\n\nexport default colors;\n","import * as React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  useColorModeValue,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport RSelect from \"react-select\";\nimport { uuid } from \"uuidv4\";\nimport chakraColors from \"../../../Util/chakraColors\";\n\ninterface PropTypes {\n  onClose: () => void;\n}\n\n// TODO handle logic for no group cases\n\nconst AddCaseModal = ({ onClose }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(true);\n  const [selectedValue, setSelectedValue] = useState(\"\");\n  const [hasGroup, setHasGroup] = useState(false);\n\n  const caseName = useRef<string>(\"\");\n  const points = useRef<number>(50);\n  const pointsDefined = useRef<boolean>(false);\n\n  const addCase = useStoreActions((actions) => actions.cases.addCase);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n  const darkTheme = useColorModeValue(false, true);\n\n  let options = groupData.map((groupElement) => {\n    return {\n      value: groupElement.groupId,\n      label: groupElement.name,\n    };\n  });\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    let selectedGroupId = selectedValue;\n\n    if (selectedGroupId === \"\") {\n      selectedGroupId = options[0].value;\n    }\n\n    groupData.forEach((groupElement) => {\n      if (groupElement.groupId === selectedGroupId) {\n        groupElement.cases.forEach((caseElement) => {\n          if (caseElement.name === caseName.current) {\n            isValid = false;\n            return;\n          }\n        });\n      }\n      if (!isValid) return;\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear caso\",\n        description:\n          \"No puedes tener casos con el mismo nombre en un mismo grupo\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addCase({\n      caseId: uuid(),\n      name: caseName.current,\n      groupId: selectedGroupId,\n      points: points.current,\n      defined: pointsDefined.current,\n    });\n\n    onClose();\n  }\n\n  function handleSelectChange(event: any) {\n    setSelectedValue(event.value);\n    setHasGroup(event.value !== options[0].value);\n  }\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del caso</FormLabel>\n        <Input onChange={(e) => (caseName.current = e.target.value)} />\n      </FormControl>\n      <FormControl mt={5} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <RSelect\n          defaultValue={{ label: \"Sin Grupo\", value: options[0].value }}\n          options={options}\n          value={options.find((obj) => obj.value === selectedValue)}\n          onChange={handleSelectChange}\n          theme={\n            darkTheme\n              ? (theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary: chakraColors.blue[200], // Selected\n                    primary25: chakraColors.gray[600], // Ring\n                    primary50: chakraColors.blue[600], // Ring\n                    primary75: chakraColors.blue[700], // Ring\n                    neutral0: chakraColors.gray[700],\n                    neutral5: chakraColors.gray[700],\n                    neutral10: chakraColors.gray[700],\n                    neutral20: chakraColors.gray[600],\n                    neutral30: chakraColors.gray[500],\n                    neutral40: chakraColors.white,\n                    neutral50: chakraColors.white,\n                    neutral80: chakraColors.white,\n                    neutral90: chakraColors.white,\n                  },\n                })\n              : undefined\n          }\n        />\n      </FormControl>\n      {!hasGroup && (\n        <FormControl mt={5}>\n          <FormLabel> Puntaje </FormLabel>\n          <NumberInput\n            onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n            min={0}\n            max={100}\n            isDisabled={autoPoints}\n          >\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n          {autoPoints && (\n            <FormHelperText>\n              El programa calculará automáticamente el puntaje\n            </FormHelperText>\n          )}\n          <Checkbox\n            mt={3}\n            isChecked={autoPoints}\n            onChange={() => {\n              setAutoPoints(!autoPoints);\n              pointsDefined.current = autoPoints;\n            }}\n          >\n            Puntaje automático\n          </Checkbox>\n        </FormControl>\n      )}\n      <Button colorScheme=\"green\" isFullWidth mt={10} type=\"submit\">\n        Agregar Caso\n      </Button>\n    </form>\n  );\n};\n\nexport default AddCaseModal;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\nimport { uuid } from \"uuidv4\";\n\ninterface PropTypes {\n  onClose: () => void;\n}\n\nconst AddGroupModal = ({ onClose }: PropTypes) => {\n  const [autoPoints, setAutoPoints] = useState(true);\n\n  const groupName = useRef<string>(\"\");\n  const points = useRef<number>(50);\n  const pointsDefined = useRef<boolean>(false);\n\n  const addGroup = useStoreActions((actions) => actions.cases.addGroup);\n  const groupData = useStoreState((state) => state.cases.data);\n\n  const toast = useToast();\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    groupData.forEach((groupElement) => {\n      if (groupElement.name === groupName.current) {\n        isValid = false;\n        return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    addGroup({\n      groupId: uuid(),\n      name: groupName.current,\n      points: points.current,\n      defined: pointsDefined.current,\n      cases: [],\n    });\n\n    onClose();\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <Input onChange={(e) => (groupName.current = e.target.value)} />\n      </FormControl>\n      <FormControl mt={5}>\n        <FormLabel> Puntaje </FormLabel>\n        <NumberInput\n          onChange={(e, valueAsNumber) => (points.current = valueAsNumber)}\n          min={0}\n          max={100}\n          isDisabled={autoPoints}\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        {autoPoints && (\n          <FormHelperText>\n            El programa calculará automáticamente el puntaje\n          </FormHelperText>\n        )}\n        <Checkbox\n          mt={3}\n          isChecked={autoPoints}\n          onChange={() => {\n            setAutoPoints(!autoPoints);\n            pointsDefined.current = autoPoints;\n          }}\n        >\n          Puntaje automático\n        </Checkbox>\n      </FormControl>\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Agregar Problema\n      </Button>\n    </form>\n  );\n};\n\nexport default AddGroupModal;\n","import * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst Add = ({ isOpen, onClose }: PropTypes) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Agregar </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Tabs size={\"sm\"}>\n            <TabList>\n              <Tab> Caso </Tab>\n              <Tab> Grupo </Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                <AddCaseModal onClose={onClose} submitButton={\"Agregar\"} />\n              </TabPanel>\n              <TabPanel>\n                <AddGroupModal\n                  onClose={onClose}\n                  submitButton={\"Agregar\"}\n                  edit={false}\n                />\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default Add;\n","import { DragHandleIcon, EditIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  HStack,\n  Editable,\n  EditablePreview,\n  EditableInput,\n  Textarea,\n  Input,\n  Select,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport { DraggableProvided } from \"react-beautiful-dnd\";\nimport { ILine } from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes extends ILine {\n  provided: DraggableProvided;\n}\nconst LayoutLine = (props: PropTypes) => {\n  const { provided, label, type, lineId, arrayData, matrixData } = props;\n\n  const [mode, setMode] = useState(type);\n\n  const typeRef = useRef(type);\n  const labelRef = useRef<HTMLDivElement>(null);\n  const updateLine = useStoreActions(\n    (actions) => actions.input.updateLayoutLine\n  );\n  const deleteLine = useStoreActions(\n    (actions) => actions.input.removeLayoutLine\n  );\n\n  function handleSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const value = e.currentTarget.value;\n    if (\n      value === \"line\" ||\n      value === \"multiline\" ||\n      value === \"array\" ||\n      value === \"matrix\"\n    ) {\n      setMode(value);\n      typeRef.current = value;\n    }\n    handleUpdateLine();\n  }\n\n  function handleUpdateLine() {\n    const newLabel =\n      labelRef.current !== null ? labelRef.current.children[0].innerHTML : \"\";\n    updateLine({\n      label: newLabel,\n      lineId: lineId,\n      type: typeRef.current,\n      value: \"\",\n      arrayData: arrayData,\n      matrixData: matrixData,\n    });\n  }\n\n  return (\n    <Box w={\"100%\"} p={3} border={\"1px solid rgba(5,5,5,0.1)\"} borderRadius={5}>\n      <HStack w={\"100%\"} h={\"100%\"}>\n        <Box {...provided.dragHandleProps}>\n          <DragHandleIcon />\n        </Box>\n\n        <Editable\n          ref={labelRef}\n          defaultValue={label}\n          isTruncated\n          fontSize={\"sm\"}\n          textOverflow={\"clip\"}\n          minW={\"40px\"}\n          maxW={\"40px\"}\n          onSubmit={() => handleUpdateLine()}\n        >\n          <EditablePreview />\n          <EditableInput />\n        </Editable>\n        <Select\n          size={\"sm\"}\n          value={type}\n          onChange={(e) => handleSelectChange(e)}\n        >\n          <option value={\"line\"}> Linea </option>\n          <option value={\"multiline\"}> Multilínea</option>\n          <option value={\"array\"}> Arreglo </option>\n          <option value={\"matrix\"}> Matriz </option>\n        </Select>\n        <DeleteIcon cursor={\"pointer\"} onClick={() => deleteLine(lineId)} />\n      </HStack>\n    </Box>\n  );\n};\n\nexport default LayoutLine;\n","import { Box, Button, Center, VStack } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { uuid } from \"uuidv4\";\nimport { ILine } from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport LayoutLine from \"./LayoutLine\";\nimport Line from \"./Line\";\n\ninterface PropTypes {\n  isLeft?: boolean;\n}\nconst LayoutLines = (props: PropTypes) => {\n  const { isLeft = false } = props;\n  const layout = useStoreState((state) => state.input.layout);\n  const setLayout = useStoreActions((actions) => actions.input.setLayout);\n  const addLine = useStoreActions((actions) => actions.input.addLayoutLine);\n\n  function handleDragEnd(result: DropResult) {\n    if (!result.destination) return;\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n\n    if (layout !== undefined) {\n      const newArray = Array.from(layout);\n      const [removed] = newArray.splice(startIndex, 1);\n      newArray.splice(endIndex, 0, removed);\n      setLayout(newArray);\n    }\n  }\n\n  function handleAddLine() {\n    addLine({\n      lineId: uuid(),\n      label: \"New\",\n      type: \"line\",\n      value: \"\",\n      arrayData: undefined,\n      matrixData: undefined,\n    });\n  }\n\n  return (\n    <VStack>\n      <DragDropContext onDragEnd={(result) => handleDragEnd(result)}>\n        <Droppable droppableId={\"layout\"}>\n          {(provided, snapshot) => (\n            <Box\n              w={\"full\"}\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {layout !== undefined &&\n                layout.map((line, index) => (\n                  <Draggable\n                    key={line.lineId}\n                    draggableId={line.lineId}\n                    index={index}\n                  >\n                    {(provided, snapshot) => {\n                      if (\n                        snapshot.isDragging &&\n                        provided.draggableProps.style !== undefined\n                      ) {\n                        const offset = {\n                          x: isLeft ? 0 : window.innerWidth - 320,\n                          y: 0,\n                        }; // your fixed container left/top position\n                        // @ts-ignore\n                        const x = provided.draggableProps.style.left - offset.x;\n                        // @ts-ignore\n                        const y = provided.draggableProps.style.top - offset.y;\n                        // @ts-ignore\n                        provided.draggableProps.style.left = x;\n                        // @ts-ignore\n                        provided.draggableProps.style.top = y;\n                      }\n                      return (\n                        <Box\n                          w={\"full\"}\n                          mb={3}\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                        >\n                          <LayoutLine provided={provided} {...line} />\n                        </Box>\n                      );\n                    }}\n                  </Draggable>\n                ))}\n              {provided.placeholder}\n            </Box>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <Center>\n        <Button size={\"sm\"} onClick={handleAddLine}>\n          +\n        </Button>\n      </Center>\n    </VStack>\n  );\n};\n\nexport default LayoutLines;\n","import {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Input,\n  DrawerFooter,\n  Button,\n  HStack,\n  VStack,\n  Center,\n  Flex,\n} from \"@chakra-ui/react\";\nimport _ from \"lodash\";\nimport * as React from \"react\";\nimport { uuid } from \"uuidv4\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport LayoutLines from \"./LayoutLines\";\nimport { useRef } from \"react\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  placement?: \"right\" | \"left\";\n  displayWritingButton?: boolean;\n}\nconst LayoutDrawer = (props: PropTypes) => {\n  const {\n    isOpen,\n    onClose,\n    placement = \"right\",\n    displayWritingButton = false,\n  } = props;\n\n  const setLayout = useStoreActions((actions) => actions.input.setLayout);\n  const selectedCase = useStoreState((state) => state.cases.selected);\n  const selectedInputData = useStoreState((state) =>\n    state.input.data.find((inputElement) =>\n      _.isEqual(inputElement.id, selectedCase)\n    )\n  );\n\n  function loadCurrentLayout() {\n    if (selectedInputData !== undefined) {\n      const mappedLines = selectedInputData.lines.map((inputElement) => {\n        return {\n          ...inputElement,\n          value: \"\",\n          lineId: uuid(),\n          arrayData:\n            inputElement.arrayData !== undefined\n              ? { ...inputElement.arrayData, value: \"\" }\n              : undefined,\n        };\n      });\n      setLayout(mappedLines);\n    }\n  }\n\n  return (\n    <Drawer isOpen={isOpen} placement={placement} onClose={onClose}>\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerCloseButton />\n        <DrawerHeader>Layout</DrawerHeader>\n\n        <DrawerBody>\n          <LayoutLines isLeft={!displayWritingButton} />\n        </DrawerBody>\n\n        <DrawerFooter>\n          <VStack w={\"100%\"}>\n            {displayWritingButton && (\n              <Button isFullWidth size={\"sm\"} colorScheme=\"blue\">\n                Ver Reddacción\n              </Button>\n            )}\n            <Button\n              isFullWidth\n              colorScheme=\"red\"\n              size={\"sm\"}\n              onClick={() => setLayout([])}\n            >\n              Borrar Layout\n            </Button>\n            <Button\n              isFullWidth\n              p={7}\n              whiteSpace={\"normal\"}\n              overflowWrap={\"break-word\"}\n              colorScheme=\"green\"\n              onClick={() => loadCurrentLayout()}\n            >\n              Crear Layout a partir del caso seleccionado\n            </Button>\n          </VStack>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n\nexport default LayoutDrawer;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport Navigation from \"./Navigation\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Add from \"./Add\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport LayoutDrawer from \"../Input/LayoutDrawer\";\n\nconst Sidebar = () => {\n  const divBorderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n\n  const {\n    isOpen: isOpenAdd,\n    onOpen: onOpenAdd,\n    onClose: onCloseAdd,\n  } = useDisclosure();\n\n  const {\n    isOpen: isOpenLayout,\n    onOpen: onOpenLayout,\n    onClose: onCloseLayout,\n  } = useDisclosure();\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  return (\n    <motion.div initial={{ opacity: 0, x: -50 }} animate={{ opacity: 1, x: 0 }}>\n      <Box\n        w={\"100%\"}\n        h={\"75vh\"}\n        borderRight={\"1px\"}\n        borderColor={divBorderColor}\n      >\n        <Box width={\"90%\"}>\n          <Flex align={\"center\"} mb={4}>\n            <Text mr={5} fontSize={\"xl\"} fontWeight={\"bold\"}>\n              Grupos\n            </Text>\n            <Spacer />\n            <Button\n              size={\"sm\"}\n              colorScheme={\"green\"}\n              onClick={onOpenAdd}\n              mr={2}\n            >\n              {isLargeScreen ? <p> Agregar</p> : <p> + </p>}\n            </Button>\n            <Menu>\n              <MenuButton\n                as={IconButton}\n                icon={<Dots />}\n                size={\"sm\"}\n                syle={{ zIndex: 99 }}\n              />\n              <MenuList>\n                <MenuItem fontSize={\"sm\"} onClick={onOpenLayout}>\n                  Layout\n                </MenuItem>\n              </MenuList>\n            </Menu>\n            <Add isOpen={isOpenAdd} onClose={onCloseAdd} />\n            <LayoutDrawer\n              isOpen={isOpenLayout}\n              onClose={onCloseLayout}\n              displayWritingButton\n            />\n          </Flex>\n          <Divider />\n          <Navigation />\n        </Box>\n      </Box>\n    </motion.div>\n  );\n};\n\nexport default Sidebar;\n","import * as React from \"react\";\nimport {\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Select,\n  toast,\n  useToast,\n  Button,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport RSelect from \"react-select\";\nimport chakraColors from \"../../../Util/chakraColors\";\ninterface PropTypes extends ICase {\n  onClose: () => void;\n}\nconst EditCaseModal = (props: PropTypes) => {\n  const { groupId, caseId, name, points, defined, onClose } = props;\n\n  const [autoPoints, setAutoPoints] = useState(!defined);\n  const [selectedValue, setSelectedValue] = useState(groupId);\n\n  const nameRef = useRef<string>(name);\n  const pointsRef = useRef<number>(points);\n  const definedRef = useRef<boolean>(defined);\n\n  const editCase = useStoreActions((actions) => actions.cases.editCase);\n  const groupData = useStoreState((state) => state.cases.data);\n  const handleGroupChange = useStoreActions(\n    (actions) => actions.input.handleGroupChange\n  );\n\n  const toast = useToast();\n  const darkTheme = useColorModeValue(false, true);\n\n  let options = groupData.map((groupElement) => {\n    return {\n      value: groupElement.groupId,\n      label: groupElement.name,\n    };\n  });\n\n  const [hasGroup, setHasGroup] = useState(groupId !== options[0].value);\n\n  // Tengo que quitarlo primero del grupo donde estaba antes\n  // Tengo que agregarlo al nuevo grupo\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let isValid = true;\n    let selectedGroupId = selectedValue;\n\n    if (selectedGroupId === \"\") {\n      selectedGroupId = options[0].value;\n    }\n\n    groupData.forEach((groupElement) => {\n      if (groupElement.groupId === groupId) {\n        groupElement.cases.forEach((caseElement) => {\n          if (\n            caseElement.name === nameRef.current &&\n            nameRef.current !== name\n          ) {\n            isValid = false;\n            return;\n          }\n        });\n        if (!isValid) return;\n      }\n    });\n\n    if (!isValid) {\n      toast({\n        title: \"Error al crear grupo\",\n        description: \"No puedes tener grupos con el mismo nombre\",\n        status: \"error\",\n        isClosable: true,\n      });\n      return;\n    }\n\n    // cambiar el selected\n    editCase({\n      case: {\n        caseId: caseId,\n        name: nameRef.current,\n        points: pointsRef.current,\n        groupId: selectedGroupId,\n        defined: definedRef.current,\n      },\n      lastId: groupId,\n    });\n\n    handleGroupChange({ caseId: caseId, newGroupId: selectedGroupId });\n\n    onClose();\n  }\n\n  function handleSelectChange(event: any) {\n    setSelectedValue(event.value);\n    setHasGroup(event.value !== options[0].value);\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <FormControl mt={3} isRequired>\n        <FormLabel> Nombre del caso</FormLabel>\n        <Input\n          onChange={(e) => (nameRef.current = e.target.value)}\n          defaultValue={name}\n        />\n      </FormControl>\n      <FormControl mt={5} isRequired>\n        <FormLabel> Nombre del grupo</FormLabel>\n        <RSelect\n          defaultValue={options.find((obj) => obj.value === groupId)}\n          options={options}\n          value={options.find((obj) => obj.value === selectedValue)}\n          onChange={handleSelectChange}\n          theme={\n            darkTheme\n              ? (theme) => ({\n                  ...theme,\n                  colors: {\n                    ...theme.colors,\n                    primary: chakraColors.blue[200], // Selected\n                    primary25: chakraColors.gray[600], // Ring\n                    primary50: chakraColors.blue[600], // Ring\n                    primary75: chakraColors.blue[700], // Ring\n                    neutral0: chakraColors.gray[700],\n                    neutral5: chakraColors.gray[700],\n                    neutral10: chakraColors.gray[700],\n                    neutral20: chakraColors.gray[600],\n                    neutral30: chakraColors.gray[500],\n                    neutral40: chakraColors.white,\n                    neutral50: chakraColors.white,\n                    neutral80: chakraColors.white,\n                    neutral90: chakraColors.white,\n                  },\n                })\n              : undefined\n          }\n        />\n      </FormControl>\n      {!hasGroup && (\n        <FormControl mt={5}>\n          <FormLabel> Puntaje </FormLabel>\n          <NumberInput\n            onChange={(e, valueAsNumber) => (pointsRef.current = valueAsNumber)}\n            defaultValue={points}\n            min={0}\n            max={100}\n            isDisabled={autoPoints}\n          >\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n          {autoPoints && (\n            <FormHelperText>\n              El programa calculará automáticamente el puntaje\n            </FormHelperText>\n          )}\n          <Checkbox\n            mt={3}\n            isChecked={autoPoints}\n            onChange={() => {\n              setAutoPoints(!autoPoints);\n              definedRef.current = autoPoints;\n            }}\n          >\n            Puntaje automático\n          </Checkbox>\n        </FormControl>\n      )}\n      <Button colorScheme=\"green\" isFullWidth mt={10} type={\"submit\"}>\n        Editar Caso\n      </Button>\n    </form>\n  );\n};\n\nexport default EditCaseModal;\n","import * as React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport AddCaseModal from \"./AddCaseModal\";\nimport AddGroupModal from \"./AddGroupModal\";\nimport { ICase, IGroup } from \"../../../Redux/Models/CasesModel\";\nimport EditGroupModal from \"./EditGroupModal\";\nimport EditCaseModal from \"./EditCaseModal\";\n\ninterface PropTypes extends ICase {\n  isOpen: boolean;\n  onClose: () => void;\n}\nconst EditCase = (props: PropTypes) => {\n  const { isOpen, onClose } = props;\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Editar Caso </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mb={5}>\n          <EditCaseModal {...props} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default EditCase;\n","import * as React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupId: string;\n  caseId: string;\n}\n\nconst DeleteItem = (props: PropTypes) => {\n  const { isOpen, onClose, groupId, caseId } = props;\n\n  const toast = useToast();\n\n  const removeCase = useStoreActions((actions) => actions.cases.removeCase);\n  const selectCase = useStoreActions((actions) => actions.cases.setSelected);\n\n  function deleteCase() {\n    toast({\n      title: \"Caso borrado\",\n      description: \"El caso ha sido borrado exitosamente\",\n      status: \"success\",\n      isClosable: true,\n    });\n\n    removeCase({\n      caseId: caseId,\n      groupId: groupId,\n    });\n    selectCase({ caseId: \"None\", groupId: \"None\" });\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Borrar Caso</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar este caso? Este cambio no se puede\n          deshacer\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => deleteCase()}\n          >\n            Borrar Caso\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DeleteItem;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Button,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { caseIdentifier } from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions } from \"../../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  caseIdentifier: caseIdentifier;\n}\nconst DeleteLinesModal = (props: PropTypes) => {\n  const { isOpen, onClose, caseIdentifier } = props;\n  const deleteAllLines = useStoreActions(\n    (actions) => actions.input.removeAllLines\n  );\n\n  function handleDeleteAllLines() {\n    deleteAllLines(caseIdentifier);\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader> Borrar todas las Líneas </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar todas las líneas? Todo el contenido\n          dentro de estas será borrado. Esta acción no se puede deshacer.\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => handleDeleteAllLines()}\n          >\n            Borrar Líneas\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default DeleteLinesModal;\n","import * as React from \"react\";\nimport {\n  HStack,\n  Text,\n  Spacer,\n  Button,\n  useDisclosure,\n  Box,\n  Switch,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/react\";\nimport EditCase from \"../Sidebar/EditCase\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport DeleteItem from \"../Sidebar/DeleteItem\";\nimport { useSelectedData } from \"../../../Hooks/useSelectedData\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\nimport { BsEye, BsFillEyeSlashFill } from \"react-icons/all\";\nimport { ChangeEvent } from \"react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport DeleteLinesModal from \"./DeleteLinesModal\";\nimport LayoutDrawer from \"./LayoutDrawer\";\nimport { uuid } from \"uuidv4\";\nimport _ from \"lodash\";\n\ninterface PropTypes {\n  groupName: string;\n  caseData: ICase;\n}\n\nconst TopBar = (props: PropTypes) => {\n  const { groupName, caseData } = props;\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenRemove,\n    onOpen: onOpenRemove,\n    onClose: onCloseRemove,\n  } = useDisclosure();\n  const {\n    isOpen: isOpenLines,\n    onOpen: onOpenLines,\n    onClose: onCloseLines,\n  } = useDisclosure();\n\n  const hidden = useStoreState((state) => state.input.hidden);\n  const setHidden = useStoreActions((actions) => actions.input.setHidden);\n  const setLines = useStoreActions((actions) => actions.input.setLines);\n  const layout = useStoreState((state) => state.input.layout);\n  const addCase = useStoreActions((actions) => actions.cases.addCase);\n  const addPage = useStoreActions((actions) => actions.input.addData);\n  const selectedLines = useStoreState((state) =>\n    state.input.data.find((inputElement) =>\n      _.isEqual(inputElement.id, {\n        groupId: caseData.groupId,\n        caseId: caseData.caseId,\n      })\n    )\n  );\n  const groupState = useStoreState((state) =>\n    state.cases.data.find(\n      (groupElement) => groupElement.groupId === caseData.groupId\n    )\n  );\n\n  function handleHidden(event: ChangeEvent<HTMLInputElement>) {\n    setHidden(event.target.checked);\n  }\n\n  function handleLayoutLoad() {\n    if (layout !== undefined) {\n      const layoutNewIds = layout.map((layoutElement) => {\n        return { ...layoutElement, lineId: uuid() };\n      });\n      setLines({\n        caseIdentifier: { groupId: caseData.groupId, caseId: caseData.caseId },\n        lineArray: layoutNewIds,\n      });\n    }\n  }\n\n  function duplicateCase() {\n    const newCaseId = uuid();\n    let newCaseName: string;\n    let i = 1;\n    while (true) {\n      newCaseName = caseData.name + ` (${i})`;\n      if (\n        groupState?.cases.find(\n          (caseElement) => caseElement.name === newCaseName\n        ) === undefined\n      ) {\n        break;\n      }\n      i++;\n    }\n    addCase({\n      ...caseData,\n      caseId: newCaseId,\n      name: newCaseName,\n    });\n    const newIdLines = selectedLines?.lines.map((lineElement) => {\n      return { ...lineElement, lineId: uuid() };\n    });\n    if (newIdLines !== undefined) {\n      addPage({\n        id: { groupId: caseData.groupId, caseId: newCaseId },\n        lines: newIdLines,\n      });\n    }\n  }\n\n  return (\n    <Box mb={2}>\n      <HStack h={\"20%\"} w={\"100%\"} pl={5}>\n        <Text fontWeight={\"bold\"} fontSize={20}>\n          {caseData.name}\n        </Text>\n        <h2> {groupName}</h2>\n        <Spacer />\n        <HStack pr={5}>\n          <BsFillEyeSlashFill />\n          <Switch onChange={(e) => handleHidden(e)} isChecked={hidden} />\n        </HStack>\n        <Button size={\"sm\"} onClick={onOpenEdit}>\n          Editar Caso\n        </Button>\n        <Button size={\"sm\"} onClick={onOpenRemove}>\n          {\" \"}\n          Eliminar Caso{\" \"}\n        </Button>\n        <Menu>\n          <MenuButton\n            as={IconButton}\n            icon={<Dots />}\n            size={\"sm\"}\n            syle={{ zIndex: 99 }}\n          />\n          <MenuList>\n            <MenuItem fontSize={\"sm\"} onClick={handleLayoutLoad}>\n              Cargar Layout\n            </MenuItem>\n            <MenuItem fontSize={\"sm\"} onClick={duplicateCase}>\n              Duplicar Caso\n            </MenuItem>\n            <MenuItem fontSize={\"sm\"} onClick={onOpenLines}>\n              Borrar Lineas\n            </MenuItem>\n          </MenuList>\n        </Menu>\n      </HStack>\n      <EditCase isOpen={isOpenEdit} onClose={onCloseEdit} {...caseData} />\n      <DeleteItem\n        isOpen={isOpenRemove}\n        onClose={onCloseRemove}\n        groupId={caseData.groupId}\n        caseId={caseData.caseId}\n      />\n      <DeleteLinesModal\n        isOpen={isOpenLines}\n        onClose={onCloseLines}\n        caseIdentifier={{ groupId: caseData.groupId, caseId: caseData.caseId }}\n      />\n    </Box>\n  );\n};\n\nexport default TopBar;\n","import {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  VStack,\n  Button,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  FormControl,\n  FormLabel,\n  HStack,\n  Center,\n  Checkbox,\n  Textarea,\n  FormErrorMessage,\n  FormHelperText,\n  Spacer,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { caseIdentifier, IArrayData } from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions } from \"../../../Redux/Store\";\nimport LayoutLines from \"./LayoutLines\";\nimport LayoutDrawer from \"./LayoutDrawer\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  caseIdentifier: caseIdentifier;\n  lineId: string;\n  arrayData: IArrayData | undefined;\n}\n\nfunction getRandom(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateArray(\n  size: number,\n  minValue: number,\n  maxValue: number,\n  distinct: boolean\n) {\n  var generatedArray = \"\";\n  const arrayValues = new Set();\n\n  if (distinct && maxValue - minValue < size - 1) {\n    return \"No se puede generar un arreglo con estos parámetros\";\n  }\n\n  for (var i = 0; i < size; i++) {\n    let randomValue = Infinity;\n    do {\n      randomValue = getRandom(minValue, maxValue + 1);\n    } while (distinct && arrayValues.has(randomValue));\n    arrayValues.add(randomValue);\n    generatedArray += randomValue + \" \";\n  }\n  return generatedArray;\n}\n\nconst ArrayGenDrawer = (props: PropTypes) => {\n  const { isOpen, onClose, caseIdentifier, lineId, arrayData } = props;\n\n  const [arrayValue, setArrayValue] = useState<string>(\n    arrayData !== undefined ? arrayData.value : \"\"\n  );\n  const [distinct, setDistinct] = useState<boolean>(\n    arrayData !== undefined ? arrayData.distinct : false\n  );\n  const [valid, setValid] = useState<\"size\" | \"min\" | \"max\" | \"none\">(\"none\");\n\n  const sizeRef = useRef<HTMLInputElement>(null);\n  const minValueRef = useRef<HTMLInputElement>(null);\n  const maxValueRef = useRef<HTMLInputElement>(null);\n\n  const updateArrayData = useStoreActions(\n    (actions) => actions.input.setLineArrayData\n  );\n\n  const {\n    isOpen: isOpenLayout,\n    onClose: onCloseLayout,\n    onOpen: onOpenLayout,\n  } = useDisclosure();\n\n  function handleGenerateArray() {\n    setValid(\"none\");\n    if (\n      sizeRef.current !== null &&\n      minValueRef.current !== null &&\n      maxValueRef.current !== null\n    ) {\n      const size = parseInt(sizeRef.current.value);\n      const minValue = parseInt(minValueRef.current.value);\n      const maxValue = parseInt(maxValueRef.current.value);\n\n      const newArray = generateArray(size, minValue, maxValue, distinct);\n\n      const arrayData: IArrayData = {\n        size: size,\n        minValue: minValue,\n        maxValue: maxValue,\n        distinct: distinct,\n        value: newArray,\n      };\n      setArrayValue(newArray);\n      updateArrayData({\n        caseIdentifier: caseIdentifier,\n        lineId: lineId,\n        arrayData: arrayData,\n      });\n    }\n  }\n\n  function checkValidity(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    const localArrayVal = e.target.value;\n    let anyFails = false;\n    const arraySplitted = localArrayVal.split(\" \").filter((value) => {\n      const parsedValue = parseInt(value);\n      if (minValueRef.current !== null && maxValueRef.current !== null) {\n        if (parsedValue < parseInt(minValueRef.current.value)) {\n          setValid(\"min\");\n          anyFails = true;\n        }\n\n        if (parsedValue > parseInt(maxValueRef.current.value)) {\n          setValid(\"max\");\n          anyFails = true;\n        }\n      }\n      return value !== \"\";\n    });\n    if (\n      sizeRef.current !== null &&\n      arraySplitted.length !== parseInt(sizeRef.current.value)\n    ) {\n      setValid(\"size\");\n      anyFails = true;\n    }\n    console.log(arraySplitted);\n    if (!anyFails) setValid(\"none\");\n    setArrayValue(e.target.value);\n    if (arrayData !== undefined)\n      updateArrayData({\n        caseIdentifier: caseIdentifier,\n        lineId: lineId,\n        arrayData: { ...arrayData, value: e.target.value },\n      });\n  }\n\n  return (\n    <>\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Generador de Arreglos</DrawerHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleGenerateArray();\n            }}\n          >\n            <DrawerBody>\n              <FormControl isRequired>\n                <FormLabel> Tamaño del Arreglo</FormLabel>\n                <NumberInput defaultValue={arrayData?.size}>\n                  <NumberInputField ref={sizeRef} required />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n              </FormControl>\n              <HStack mt={5}>\n                <FormControl isRequired>\n                  <FormLabel> Valor Mínimo</FormLabel>\n                  <NumberInput defaultValue={arrayData?.minValue}>\n                    <NumberInputField ref={minValueRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel> Valor Máximo</FormLabel>\n                  <NumberInput defaultValue={arrayData?.maxValue}>\n                    <NumberInputField ref={maxValueRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n              </HStack>\n              <Center mt={5}>\n                <Checkbox\n                  isChecked={distinct}\n                  onChange={(e) => setDistinct(e.target.checked)}\n                >\n                  Valores Distintos\n                </Checkbox>\n              </Center>\n              <FormControl mt={5} isInvalid={valid !== \"none\"}>\n                <FormLabel>\n                  <HStack>\n                    <span>Arreglo Generado:</span>\n                    <Spacer />\n                    <Link to={`/array/${lineId}`}>\n                      <Button size=\"sm\" variant=\"link\">\n                        Ver Raw\n                      </Button>\n                    </Link>\n                  </HStack>\n                </FormLabel>\n                <Textarea\n                  h={valid !== \"none\" ? \"170px\" : \"195px\"}\n                  value={arrayValue}\n                  onChange={(e) => checkValidity(e)}\n                ></Textarea>\n                <FormErrorMessage>\n                  {valid === \"size\" && (\n                    <span>El tamaño del arreglo no coincide</span>\n                  )}\n                  {valid === \"min\" && (\n                    <span>Algún valor del arreglo es menor </span>\n                  )}\n                  {valid === \"max\" && (\n                    <span>Algún valor del arreglo es mayor </span>\n                  )}\n                </FormErrorMessage>\n              </FormControl>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <VStack w={\"100%\"}>\n                <HStack w={\"100%\"}>\n                  <Button isFullWidth size={\"sm\"} colorScheme=\"blue\">\n                    Ver Redacción\n                  </Button>\n                  <Button\n                    isFullWidth\n                    size={\"sm\"}\n                    colorScheme=\"blue\"\n                    onClick={onOpenLayout}\n                  >\n                    Ver Layout\n                  </Button>\n                </HStack>\n                <Button\n                  isFullWidth\n                  colorScheme=\"red\"\n                  size={\"sm\"}\n                  onClick={() => {\n                    setValid(\"none\");\n                    setArrayValue(\"\");\n                  }}\n                >\n                  Reiniciar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  isFullWidth\n                  colorScheme=\"green\"\n                  // onClick={() => handleGenerateArray()}\n                >\n                  Generar\n                </Button>\n              </VStack>\n            </DrawerFooter>\n          </form>\n        </DrawerContent>\n      </Drawer>\n      <LayoutDrawer\n        isOpen={isOpenLayout}\n        onClose={onCloseLayout}\n        placement={\"left\"}\n      />\n    </>\n  );\n};\nexport default ArrayGenDrawer;\n","import {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  DrawerFooter,\n  VStack,\n  Button,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  FormControl,\n  FormLabel,\n  HStack,\n  Center,\n  Checkbox,\n  Textarea,\n  FormErrorMessage,\n  FormHelperText,\n  Spacer,\n  Select,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  caseIdentifier,\n  IArrayData,\n  IMatrixData,\n} from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions } from \"../../../Redux/Store\";\nimport LayoutLines from \"./LayoutLines\";\nimport LayoutDrawer from \"./LayoutDrawer\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  caseIdentifier: caseIdentifier;\n  lineId: string;\n  matrixData: IMatrixData | undefined;\n}\n\nfunction getRandom(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction generateMatrix(\n  rows: number,\n  columns: number,\n  minValue: number,\n  maxValue: number,\n  distinct: \"row\" | \"column\" | \"all\" | \"none\"\n) {\n  var generatedMatrix = \"\";\n  const rowValues = new Array(rows);\n  const columnValues = new Array(columns);\n\n  rowValues.fill(new Set());\n  columnValues.fill(new Set());\n\n  if (distinct !== \"none\" && maxValue - minValue < rows * columns - 1) {\n    return \"No se puede generar un arreglo con estos parámetros\";\n  }\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < columns; j++) {\n      let randomNumber: number;\n      switch (distinct) {\n        case \"row\": {\n          do {\n            randomNumber = getRandom(minValue, maxValue + 1);\n          } while (rowValues[i].has(randomNumber));\n          break;\n        }\n        case \"column\": {\n          do {\n            randomNumber = getRandom(minValue, maxValue + 1);\n          } while (columnValues[j].has(randomNumber));\n          break;\n        }\n        case \"all\": {\n          do {\n            randomNumber = getRandom(minValue, maxValue + 1);\n          } while (\n            rowValues[i].has(randomNumber) ||\n            columnValues[j].has(randomNumber)\n          );\n          break;\n        }\n        default: {\n          randomNumber = getRandom(minValue, maxValue + 1);\n        }\n      }\n\n      rowValues[i].add(randomNumber);\n      columnValues[j].add(randomNumber);\n      generatedMatrix += randomNumber + \" \";\n    }\n    generatedMatrix += \"\\n\";\n  }\n  return generatedMatrix;\n}\n\nconst ArrayGenDrawer = (props: PropTypes) => {\n  const { isOpen, onClose, caseIdentifier, lineId, matrixData } = props;\n\n  const [matrixValue, setMatrixValue] = useState<string>(\n    matrixData !== undefined ? matrixData.value : \"\"\n  );\n  const [distinct, setDistinct] = useState<\"row\" | \"column\" | \"all\" | \"none\">(\n    \"none\"\n  );\n\n  const rowsRef = useRef<HTMLInputElement>(null);\n  const colsRef = useRef<HTMLInputElement>(null);\n  const minValueRef = useRef<HTMLInputElement>(null);\n  const maxValueRef = useRef<HTMLInputElement>(null);\n\n  const updateMatrixData = useStoreActions(\n    (actions) => actions.input.setLineMatrixData\n  );\n\n  const {\n    isOpen: isOpenLayout,\n    onClose: onCloseLayout,\n    onOpen: onOpenLayout,\n  } = useDisclosure();\n\n  function handleGenerateArray() {\n    if (\n      rowsRef.current !== null &&\n      colsRef.current !== null &&\n      minValueRef.current !== null &&\n      maxValueRef.current !== null\n    ) {\n      const rows = parseInt(rowsRef.current.value);\n      const cols = parseInt(colsRef.current.value);\n      const minValue = parseInt(minValueRef.current.value);\n      const maxValue = parseInt(maxValueRef.current.value);\n\n      const newMatrix = generateMatrix(\n        rows,\n        cols,\n        minValue,\n        maxValue,\n        distinct\n      );\n\n      const matrixData: IMatrixData = {\n        rows: rows,\n        columns: cols,\n        minValue: minValue,\n        maxValue: maxValue,\n        distinct: distinct,\n        value: newMatrix,\n      };\n\n      setMatrixValue(newMatrix);\n      updateMatrixData({\n        caseIdentifier: caseIdentifier,\n        lineId: lineId,\n        matrixData: matrixData,\n      });\n    }\n  }\n\n  return (\n    <>\n      <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Generador de Matriz</DrawerHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleGenerateArray();\n            }}\n          >\n            <DrawerBody>\n              <HStack>\n                <FormControl isRequired>\n                  <FormLabel> Columnas</FormLabel>\n                  <NumberInput defaultValue={matrixData?.columns}>\n                    <NumberInputField ref={colsRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel> Filas</FormLabel>\n                  <NumberInput defaultValue={matrixData?.rows}>\n                    <NumberInputField ref={rowsRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n              </HStack>\n              <HStack mt={5}>\n                <FormControl isRequired>\n                  <FormLabel> Valor Mínimo</FormLabel>\n                  <NumberInput defaultValue={matrixData?.minValue}>\n                    <NumberInputField ref={minValueRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n                <FormControl isRequired>\n                  <FormLabel> Valor Máximo</FormLabel>\n                  <NumberInput defaultValue={matrixData?.maxValue}>\n                    <NumberInputField ref={maxValueRef} required />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n                </FormControl>\n              </HStack>\n              <FormControl mt={5}>\n                <FormLabel> Valores distintos:</FormLabel>\n                <Select\n                  onChange={(e) => {\n                    const selectedValue = e.target.value;\n                    if (\n                      selectedValue === \"none\" ||\n                      selectedValue === \"row\" ||\n                      selectedValue === \"column\" ||\n                      selectedValue === \"all\"\n                    ) {\n                      setDistinct(selectedValue);\n                    }\n                  }}\n                >\n                  <option value=\"none\">Ninguno</option>\n                  <option value=\"row\">Filas</option>\n                  <option value=\"column\">Columnas</option>\n                  <option value=\"all\">Ambas</option>\n                </Select>\n              </FormControl>\n              <FormControl mt={5}>\n                <FormLabel>\n                  <HStack>\n                    <span>Matriz Generada:</span>\n                    <Spacer />\n                    <Link to={`/matrix/${lineId}`}>\n                      <Button size=\"sm\" variant=\"link\">\n                        Ver Raw\n                      </Button>\n                    </Link>\n                  </HStack>\n                </FormLabel>\n                <Textarea h={\"150px\"} value={matrixValue} />\n              </FormControl>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <VStack w={\"100%\"}>\n                <HStack w={\"100%\"}>\n                  <Button isFullWidth size={\"sm\"} colorScheme=\"blue\">\n                    Ver Redacción\n                  </Button>\n                  <Button\n                    isFullWidth\n                    size={\"sm\"}\n                    colorScheme=\"blue\"\n                    onClick={onOpenLayout}\n                  >\n                    Ver Layout\n                  </Button>\n                </HStack>\n                <Button\n                  isFullWidth\n                  colorScheme=\"red\"\n                  size={\"sm\"}\n                  onClick={() => {\n                    setMatrixValue(\"\");\n                  }}\n                >\n                  Reiniciar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  isFullWidth\n                  colorScheme=\"green\"\n                  // onClick={() => handleGenerateArray()}\n                >\n                  Generar\n                </Button>\n              </VStack>\n            </DrawerFooter>\n          </form>\n        </DrawerContent>\n      </Drawer>\n      <LayoutDrawer\n        isOpen={isOpenLayout}\n        onClose={onCloseLayout}\n        placement={\"left\"}\n      />\n    </>\n  );\n};\nexport default ArrayGenDrawer;\n","import * as React from \"react\";\nimport {\n  Input,\n  Editable,\n  Flex,\n  EditablePreview,\n  EditableInput,\n  Box,\n  HStack,\n  Select,\n  Textarea,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { DeleteIcon, DragHandleIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport {\n  caseIdentifier as ICaseIdentifier,\n  ILine,\n} from \"../../../Redux/Models/InputModel\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport _ from \"lodash\";\nimport { DraggableProvided } from \"react-beautiful-dnd\";\nimport ArrayGenDrawer from \"./ArrayGenDrawer\";\nimport MatrixGenDrawer from \"./MatrixGenDrawer\";\n\n// TODO: Focus automatico al presionar enter\n// TODO: no deberia de mostrar nada si ninguna caso esta seleccionado\n// TODO: Al borrar caso/grupo deberia ir al modo no seleccionado\n\ninterface PropTypes extends ILine {\n  caseIdentifier: ICaseIdentifier;\n  addLine: () => void;\n  hide?: boolean;\n  provided: DraggableProvided;\n  showInput?: boolean;\n}\n\nconst Line = (props: PropTypes) => {\n  const {\n    hide = false,\n    lineId,\n    type,\n    value,\n    label,\n    caseIdentifier,\n    addLine,\n    provided,\n    arrayData,\n    matrixData,\n    showInput = true,\n  } = props;\n\n  const [mode, setMode] = useState(type);\n  const labelRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<any>(null);\n\n  const updateLine = useStoreActions((actions) => actions.input.updateLine);\n  const deleteLine = useStoreActions((actions) => actions.input.removeLine);\n  const lastCreated = useStoreState((state) => state.input.lastCreated);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    handleUpdateLine();\n  }, [mode]);\n\n  useEffect(() => {\n    if (lastCreated === lineId) {\n      inputRef.current.focus();\n    }\n  }, [lastCreated]);\n\n  function handleUpdateLine() {\n    let label =\n      labelRef.current !== null ? labelRef.current.children[0].innerHTML : \"\";\n    let value = inputRef.current !== null ? inputRef.current.value : \"\";\n\n    updateLine({\n      lineId: lineId,\n      caseIdentifier: caseIdentifier,\n      lineData: {\n        lineId: lineId,\n        label: label,\n        value: value,\n        type: mode,\n        arrayData: arrayData,\n        matrixData: matrixData,\n      },\n    });\n  }\n\n  function handleEnterPress(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === \"Enter\") {\n      inputRef.current?.blur();\n      addLine();\n    }\n  }\n\n  function handleSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const value = e.currentTarget.value;\n    if (\n      value === \"line\" ||\n      value === \"multiline\" ||\n      value === \"array\" ||\n      value === \"matrix\"\n    ) {\n      setMode(value);\n    }\n  }\n\n  function handleDelete() {\n    deleteLine({\n      caseIdentifier: caseIdentifier,\n      lineId: lineId,\n    });\n  }\n\n  function renderSwitch() {\n    switch (mode) {\n      case \"multiline\":\n        return (\n          <Textarea\n            size={\"sm\"}\n            defaultValue={value}\n            ref={inputRef}\n            onBlur={() => handleUpdateLine()}\n          />\n        );\n      case \"line\":\n        return (\n          <Input\n            defaultValue={value}\n            // isFullWidth\n            size={\"sm\"}\n            ref={inputRef}\n            onBlur={() => handleUpdateLine()}\n            onKeyPress={(e) => handleEnterPress(e)}\n          />\n        );\n      case \"array\":\n        return (\n          <Input\n            size={\"sm\"}\n            disabled\n            ref={inputRef}\n            value={\n              arrayData === undefined\n                ? \"\"\n                : arrayData?.value.substring(0, 20) + \"...\"\n            }\n          />\n        );\n      case \"matrix\":\n        return (\n          <Input\n            size={\"sm\"}\n            disabled\n            ref={inputRef}\n            value={\n              matrixData === undefined\n                ? \"\"\n                : matrixData?.value.substring(0, 20) + \"...\"\n            }\n          />\n        );\n    }\n  }\n\n  return (\n    <Box w={\"100%\"} p={3} border={\"1px solid rgba(5,5,5,0.1)\"} borderRadius={5}>\n      <HStack w={\"100%\"} h={\"100%\"}>\n        <Box {...provided.dragHandleProps}>\n          <DragHandleIcon />\n        </Box>\n\n        {!hide && (\n          <Editable\n            isTruncated\n            defaultValue={label}\n            fontSize={\"sm\"}\n            ref={labelRef}\n            textOverflow={\"clip\"}\n            minW={\"40px\"}\n            maxW={\"40px\"}\n            onSubmit={() => handleUpdateLine()}\n          >\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n        )}\n        {showInput && renderSwitch()}\n        {!hide && (\n          <Select\n            size={\"sm\"}\n            w={\n              mode === \"array\" || mode === \"matrix\" ? 200 - 38 + \"px\" : \"200px\"\n            }\n            value={type}\n            onChange={(e) => handleSelectChange(e)}\n          >\n            <option value={\"line\"}> Linea </option>\n            <option value={\"multiline\"}> Multilínea</option>\n            <option value={\"array\"}> Arreglo </option>\n            <option value={\"matrix\"}> Matriz </option>\n          </Select>\n        )}\n        {(mode === \"array\" || mode === \"matrix\") && (\n          <EditIcon cursor={\"pointer\"} onClick={onOpen} />\n        )}\n        <DeleteIcon cursor={\"pointer\"} onClick={() => handleDelete()} />\n      </HStack>\n      {mode === \"array\" && (\n        <ArrayGenDrawer\n          isOpen={isOpen}\n          onClose={onClose}\n          lineId={lineId}\n          caseIdentifier={caseIdentifier}\n          arrayData={arrayData}\n        />\n      )}\n      {mode === \"matrix\" && (\n        <MatrixGenDrawer\n          isOpen={isOpen}\n          onClose={onClose}\n          lineId={lineId}\n          caseIdentifier={caseIdentifier}\n          matrixData={matrixData}\n        />\n      )}\n    </Box>\n  );\n};\n\n// export default Line;\nexport default React.memo(Line, (prevState, nextState) => {\n  console.log(_.isEqual(prevState, nextState));\n  return _.isEqual(prevState, nextState);\n});\n","import { useEffect, useState } from \"react\";\nimport { caseIdentifier, IInput, ILine } from \"../Redux/Models/InputModel\";\nimport { useStoreActions, useStoreState } from \"../Redux/Store\";\nimport { ICase } from \"../Redux/Models/CasesModel\";\nimport _ from \"lodash\";\nimport { uuid } from \"uuidv4\";\n\nexport const useInputPage = (caseData: ICase) => {\n  const [pageData, setPageData] = useState<ILine[]>([]);\n  const inputData = useStoreState((state) => state.input.data);\n  const addInputPage = useStoreActions((actions) => actions.input.addData);\n  const layout = useStoreState((state) => state.input.layout);\n\n  const caseIdentifier = {\n    groupId: caseData.groupId,\n    caseId: caseData.caseId,\n  };\n\n  useEffect(() => {\n    const inputPage = inputData.find((inputElement) => {\n      // return JSON.stringify(inputElement.id) === JSON.stringify(caseIdentifier);\n      return _.isEqual(inputElement.id, caseIdentifier);\n    });\n    if (inputPage === undefined) {\n      if (layout !== undefined) {\n        const layoutNewIds = layout.map((layoutElement) => {\n          layoutElement.lineId = uuid();\n          return layoutElement;\n        });\n        addInputPage({ id: caseIdentifier, lines: layoutNewIds });\n        console.log(\"Created New\", layoutNewIds);\n        setPageData(layoutNewIds);\n      } else {\n        addInputPage({ id: caseIdentifier, lines: [] });\n        setPageData([]);\n      }\n    } else {\n      setPageData(inputPage.lines);\n    }\n  }, [caseData, inputData]);\n\n  return { pageData, setPageData };\n};\n","import * as React from \"react\";\nimport Line from \"./Line\";\nimport { Box, Button, Center, Flex, VStack } from \"@chakra-ui/react\";\nimport { useStoreActions, useStoreState } from \"../../../Redux/Store\";\nimport { ICase } from \"../../../Redux/Models/CasesModel\";\nimport { useInputPage } from \"../../../Hooks/useInputPage\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { uuid } from \"uuidv4\";\nimport {\n  DragDropContext,\n  Draggable,\n  Droppable,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport { useState } from \"react\";\nimport { ILine } from \"../../../Redux/Models/InputModel\";\n\ninterface PropTypes {\n  groupName: string;\n  caseData: ICase;\n}\nconst InputWindow = (props: PropTypes) => {\n  const { groupName, caseData } = props;\n\n  const hidden = useStoreState((state) => state.input.hidden);\n  const addLine = useStoreActions((action) => action.input.addLine);\n  const setLines = useStoreActions((action) => action.input.setLines);\n  const { pageData, setPageData } = useInputPage(caseData);\n\n  const caseIdentifier = { groupId: caseData.groupId, caseId: caseData.caseId };\n\n  const addLineToStore = useCallback(() => {\n    addLine({\n      caseIdentifier: { groupId: caseData.groupId, caseId: caseData.caseId },\n      line: {\n        lineId: uuid(),\n        type: \"line\",\n        value: \"\",\n        label: \"Nombre\",\n        arrayData: undefined,\n        matrixData: undefined,\n      },\n    });\n  }, [addLine, caseData]);\n\n  function handleDragEnd(result: DropResult) {\n    if (!result.destination) return;\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n\n    const newArray = Array.from(pageData);\n    const [removed] = newArray.splice(startIndex, 1);\n    newArray.splice(endIndex, 0, removed);\n\n    setPageData(newArray);\n    setLines({\n      caseIdentifier,\n      lineArray: newArray,\n    });\n  }\n\n  return (\n    <VStack ml={5}>\n      <DragDropContext onDragEnd={(result) => handleDragEnd(result)}>\n        <Droppable droppableId={caseData.groupId + caseData.caseId}>\n          {(provided, snapshot) => (\n            <Box\n              w={\"full\"}\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {pageData.map((line, index) => (\n                <Draggable\n                  key={line.lineId}\n                  draggableId={line.lineId}\n                  index={index}\n                >\n                  {(provided, snapshot) => (\n                    <Box\n                      w={\"full\"}\n                      mb={3}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                    >\n                      <Line\n                        {...line}\n                        provided={provided}\n                        key={line.lineId}\n                        hide={hidden}\n                        caseIdentifier={caseIdentifier}\n                        addLine={addLineToStore}\n                      />\n                    </Box>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </Box>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <Center>\n        <Button size={\"sm\"} onClick={addLineToStore}>\n          +\n        </Button>\n      </Center>\n    </VStack>\n  );\n};\n\nexport default InputWindow;\n","import { useStoreState } from \"../Redux/Store\";\nimport { useEffect, useState } from \"react\";\nimport { ICase } from \"../Redux/Models/CasesModel\";\n\nexport const useSelectedData = () => {\n  const emptyObject: ICase = {\n    name: \"None\",\n    caseId: \"None\",\n    groupId: \"None\",\n    points: 0,\n    defined: false,\n  };\n\n  const [groupName, setGroupName] = useState(\"None\");\n  const [caseData, setCaseData] = useState<ICase>(emptyObject);\n\n  const selectedCase = useStoreState((state) => state.cases.selected);\n  const selectedData = useStoreState((state) => state.cases.selectedData);\n\n  useEffect(() => {\n    if (selectedCase.caseId !== \"None\" || selectedCase.groupId !== \"None\") {\n      const objectData = selectedData(\n        selectedCase.groupId,\n        selectedCase.caseId\n      );\n      setGroupName(objectData.groupName);\n      setCaseData(objectData.caseData);\n      return;\n    }\n    setGroupName(\"None\");\n    setCaseData(emptyObject);\n  }, [selectedCase]);\n\n  return { groupName, caseData };\n};\n","export default __webpack_public_path__ + \"static/media/sloth.f36a3615.png\";","import * as React from \"react\";\nimport TopBar from \"./TopBar\";\nimport {\n  Box,\n  Center,\n  Divider,\n  HStack,\n  Image,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport InputWindow from \"./InputWindow\";\nimport { useSelectedData } from \"../../../Hooks/useSelectedData\";\nimport sloth from \"../../../Assets/Images/sloth.png\";\n\nconst Input = () => {\n  const selectedData = useSelectedData();\n\n  return (\n    <Box w={\"100%\"} h={\"100%\"}>\n      {selectedData.caseData.caseId === \"None\" ? (\n        <Center h=\"60vh\">\n          <VStack>\n            <Box w={\"300px\"} h={\"300px\"}>\n              <Image src={sloth} w={\"full\"} />\n            </Box>\n            <Text fontWeight={\"bold\"}> Selecciona un caso para empezar</Text>\n            <Box fontSize={9}>\n              <a href=\"https://www.freepik.com/vectors/tree\">\n                Tree vector created by pch.vector - www.freepik.com\n              </a>\n            </Box>\n          </VStack>\n        </Center>\n      ) : (\n        <div>\n          <TopBar {...selectedData} />\n          <Divider mb={4} />\n          <InputWindow {...selectedData} />\n        </div>\n      )}\n    </Box>\n  );\n};\nexport default Input;\n","import * as React from \"react\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport { HStack, Flex, Box } from \"@chakra-ui/react\";\nimport Input from \"./Input/Input\";\n\nconst Main = () => {\n  return (\n    <Flex>\n      <Box w={\"30%\"}>\n        <Sidebar />\n      </Box>\n      <Input />\n    </Flex>\n  );\n};\n\nexport default Main;\n","import sanitizeMarkdown from \"sanitize-markdown\";\nimport { getFirstHidden } from \"web-vitals/dist/lib/getFirstHidden\";\nimport MarkdownIt from \"markdown-it\";\n\n// @ts-ignore\nimport katex from \"katex\";\n// @ts-ignore\nimport markdownMath from \"markdown-it-texmath\";\n\nfunction splitBetweenTwo(\n  input: string[],\n  firstOccurrence: string,\n  secondOccurrence: string\n) {\n  const startIndex = input.findIndex(\n    (element) => element.trim() === firstOccurrence\n  );\n  const endIndex = input.findIndex(\n    (element) =>\n      element.trim() === secondOccurrence || element.trim() === \"||end\"\n  );\n\n  return {\n    result: input.slice(startIndex + 1, endIndex),\n    index: { startIndex, endIndex },\n  };\n}\n\nfunction getLines(input: string) {\n  let lines = input.split(\"\\n\");\n  let firstGlobalIndex = lines.findIndex((line) => line === \"||input\");\n  let lastGlobalIndex = lines.findIndex((line) => line === \"||end\");\n  const occurrences = [\n    { first: \"||input\", second: \"||output\" },\n    { first: \"||output\", second: \"||description\" },\n    { first: \"||description\", second: \"||input\" },\n  ];\n  let iterator = 0;\n  let row: string[] = [],\n    inputTable: string[][] = [];\n\n  do {\n    const firstOccurrence = occurrences[iterator % 3].first;\n    const secondOccurrence = occurrences[iterator % 3].second;\n    const { result, index } = splitBetweenTwo(\n      lines,\n      firstOccurrence,\n      secondOccurrence\n    );\n    if (index.startIndex === -1 || index.endIndex === -1) break;\n    lines = lines.slice(index.endIndex);\n    if (iterator !== 0 && iterator % 3 === 0) {\n      inputTable.push(row);\n      row = [];\n    }\n    row.push(\n      result.reduce((text, line) => (text += \"<pre>\" + line + \"</pre>\"), \"\")\n      // \"<pre>\" + result.join(\"\") + \"</pre>\"\n    );\n    iterator++;\n  } while (iterator < 1000);\n  inputTable.push(row);\n  return {\n    inputTable: inputTable,\n    index: { startIndex: firstGlobalIndex, finalIndex: lastGlobalIndex + 1 },\n  };\n}\n\nexport const parse = (input: string) => {\n  const parser = new MarkdownIt({\n    html: true,\n  }).use(markdownMath, { engine: katex, delimiters: \"dollars\" });\n  const sanitizedInput = sanitizeMarkdown(input, { allowedTags: [\"br\"] });\n  console.log(sanitizedInput);\n  const { inputTable, index } = getLines(sanitizedInput);\n  const finalTableOutput: string[] = [];\n  inputTable.forEach((row) => {\n    finalTableOutput.push(\"|\" + row.join(\"|\") + \"|\");\n  });\n  const sanitizedArray = sanitizedInput.split(\"\\n\");\n  const firstPart = sanitizedArray.slice(0, index.startIndex);\n  firstPart.push(\"| Entrada | Salida | Descripcion| \");\n  firstPart.push(\"| - | - | -| \");\n  const secondPart = sanitizedArray.slice(index.finalIndex);\n  // | Entrada | Salida | Descripcion|\n  // |-|-|-|\n  const finalArray = [...firstPart, ...finalTableOutput, ...secondPart];\n  const finalString = finalArray.join(\"\\n\");\n  console.log(finalString);\n  return parser.render(finalString.replaceAll(\"$$\", \"\\n$$$$\\n\"));\n};\n","import * as React from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport \"katex/dist/katex.min.css\";\nimport { Flex, useColorModeValue } from \"@chakra-ui/react\"; // `rehype-katex` does not import the CSS for you\nimport { parse } from \"./Markdown/Parser\";\nimport \"./Markdown/MarkdownDark.css\";\nimport \"./Markdown/MarkdownLight.css\";\nimport \"./Markdown/Markdown.css\";\nimport MarkdownIt from \"markdown-it\";\n// @ts-ignore\nimport markdownMath from \"markdown-it-texmath\";\n// @ts-ignore\nimport katex from \"katex\";\n\nconst markdownHtml = parse(`\n# Descripción\n\nEsta es la descripción del problema. Inventa una historia creativa. \nPuedes utilizar matemáticas inline para hacer $x_i, y_i$, o $z_i$ o incluso:\n$$x=\\\\frac{b\\\\pm \\\\sqrt{b^2 -4ac}}{2a}$$\n\n# Entrada\n\nAquí va la descripción de la entrada del problema.\n\n# Salida\n\nEsta es la descripción de la salida esperada.\n\n# Ejemplo\n\n||input\n1\n2\n||output\nCase #1: 3\n||description\nExplicación\n||input \n5\n10\n||output\nCase #2: 15\nCase #3: 15\n14\n||description \nhola\n||input\n3\n4\n||output\n3\n||description\nhola\n||end\n\n# Límites\n\n* Aquí\n* Van\n* Los\n* Límites`);\n\nconst Display = () => {\n  const style = useColorModeValue(\"light\", \"dark\");\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (divRef.current != null) divRef.current.innerHTML = markdownHtml;\n  }, []);\n\n  return (\n    <Flex direction={\"column\"}>\n      <div ref={divRef} className={style + \" markdown\"} />\n    </Flex>\n  );\n};\n\nexport default Display;\n","import * as React from \"react\";\nimport Display from \"./Display\";\nimport { HStack } from \"@chakra-ui/react\";\n\nconst WritingWindow = () => {\n  return (\n    <HStack>\n      <Display />\n    </HStack>\n  );\n};\n\nexport default WritingWindow;\n","import * as React from \"react\";\nimport { Container, HStack } from \"@chakra-ui/react\";\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\nimport { BiCodeBlock as CodeIcon } from \"react-icons/bi\";\nimport { BsPencil as EditIcon } from \"react-icons/bs\";\nimport { IoMdCheckmarkCircleOutline as CheckIcon } from \"react-icons/io\";\nimport Sidebar from \"./Cases/Sidebar/Sidebar\";\nimport Main from \"./Cases/Main\";\nimport WritingWindow from \"./Writing/WritingWindow\";\n\nconst MainWindow = () => {\n  return (\n    <>\n      <Container maxW={\"container.lg\"} mt={3} h={\"80vh\"} padding={\"0\"}>\n        <Tabs variant={\"enclosed\"} size={\"sm\"}>\n          <TabList>\n            <Tab>\n              <HStack>\n                <CodeIcon />\n                <p>Código Solución</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <CheckIcon />\n                <p>Casos de Prueba</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <EditIcon />\n                <p>Redacción</p>\n              </HStack>\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>1</TabPanel>\n            <TabPanel>\n              <Main />\n            </TabPanel>\n            <TabPanel>\n              <WritingWindow />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n        {/*<Sidebar />*/}\n      </Container>\n    </>\n  );\n};\n\nexport default MainWindow;\n","import { CopyIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  Container,\n  HStack,\n  Spacer,\n  Text,\n  Textarea,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { FcCheckmark } from \"react-icons/fc\";\nimport { useParams } from \"react-router-dom\";\nimport { useInputPage } from \"../Hooks/useInputPage\";\nimport { useSelectedData } from \"../Hooks/useSelectedData\";\nimport { useStoreState } from \"../Redux/Store\";\n\ninterface Params {\n  lineId: string;\n}\n\nconst RawArray = () => {\n  const { lineId } = useParams<Params>();\n\n  const caseData = useSelectedData();\n  const arrayData = useInputPage(caseData.caseData).pageData.find(\n    (lineElement) => lineElement.lineId === lineId\n  )?.arrayData;\n\n  const { hasCopied, onCopy } = useClipboard(\n    arrayData !== undefined ? arrayData.value : \"\"\n  );\n  console.log(arrayData);\n\n  return (\n    <Container maxW=\"container.lg\">\n      <HStack mt={5} mb={2}>\n        <Text fontSize={\"xl\"} fontWeight={\"bold\"}>\n          Arreglo:\n        </Text>\n        <Spacer />\n        <Text>\n          Tamaño: {arrayData?.size} | Mínimo: {arrayData?.minValue} | Máximo:\n          {arrayData?.maxValue}\n        </Text>\n        <Spacer />\n        <Box w={\"100px\"}>\n          <Button size=\"sm\" onClick={onCopy}>\n            {hasCopied ? (\n              <HStack>\n                <span>Copiado!</span>\n                <FcCheckmark />\n              </HStack>\n            ) : (\n              <HStack>\n                <span>Copiar</span>\n                <CopyIcon />\n              </HStack>\n            )}\n          </Button>\n        </Box>\n      </HStack>\n\n      <Textarea h={\"80vh\"} value={arrayData?.value} />\n    </Container>\n  );\n};\n\nexport default RawArray;\n","import { CopyIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  Container,\n  HStack,\n  Spacer,\n  Text,\n  Textarea,\n  useClipboard,\n} from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { FcCheckmark } from \"react-icons/fc\";\nimport { useParams } from \"react-router-dom\";\nimport { useInputPage } from \"../Hooks/useInputPage\";\nimport { useSelectedData } from \"../Hooks/useSelectedData\";\nimport { useStoreState } from \"../Redux/Store\";\n\ninterface Params {\n  lineId: string;\n}\n\nconst RawMatrix = () => {\n  const { lineId } = useParams<Params>();\n\n  const caseData = useSelectedData();\n  const matrixData = useInputPage(caseData.caseData).pageData.find(\n    (lineElement) => lineElement.lineId === lineId\n  )?.matrixData;\n\n  const { hasCopied, onCopy } = useClipboard(\n    matrixData !== undefined ? matrixData.value : \"\"\n  );\n  console.log(matrixData);\n\n  return (\n    <Container maxW=\"container.lg\">\n      <HStack mt={5} mb={2}>\n        <Text fontSize={\"xl\"} fontWeight={\"bold\"}>\n          Arreglo:\n        </Text>\n        <Spacer />\n        <Text>\n          Filas: {matrixData?.rows} | Columnas: {matrixData?.columns} | Mínimo:{\" \"}\n          {matrixData?.minValue} | Máximo:\n          {matrixData?.maxValue}\n        </Text>\n        <Spacer />\n        <Box w={\"100px\"}>\n          <Button size=\"sm\" onClick={onCopy}>\n            {hasCopied ? (\n              <HStack>\n                <span>Copiado!</span>\n                <FcCheckmark />\n              </HStack>\n            ) : (\n              <HStack>\n                <span>Copiar</span>\n                <CopyIcon />\n              </HStack>\n            )}\n          </Button>\n        </Box>\n      </HStack>\n\n      <Textarea h={\"80vh\"} value={matrixData?.value} />\n    </Container>\n  );\n};\n\nexport default RawMatrix;\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { useStoreRehydrated } from \"easy-peasy\";\nimport Navbar from \"./Components/Navbar\";\nimport Header from \"./Components/Header\";\nimport MainWindow from \"./Components/MainWindow\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport RawArray from \"./Pages/RawArray\";\nimport RawMatrix from \"./Pages/RawMatrix\";\nexport const App = () => {\n  const isRehydrated = useStoreRehydrated();\n\n  return (\n    <ChakraProvider theme={theme}>\n      {!isRehydrated ? (\n        <h1> Loading </h1>\n      ) : (\n        <Router>\n          <Navbar />\n          <Switch>\n            <Route path=\"/array/:lineId\">\n              <RawArray />\n            </Route>\n            <Route path=\"/matrix/:lineId\">\n              <RawMatrix />\n            </Route>\n            <Route exact path=\"/\">\n              <>\n                <Header />\n                <MainWindow />\n              </>\n            </Route>\n          </Switch>\n        </Router>\n      )}\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./Redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store={store}>\n      <ColorModeScript />\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}