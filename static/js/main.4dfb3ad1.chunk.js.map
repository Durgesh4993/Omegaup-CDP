{"version":3,"sources":["ColorModeSwitcher.tsx","Components/Navbar.tsx","Redux/Models/CasesModel.ts","Redux/Store.ts","Redux/Models/TitleModel.ts","Components/Header.tsx","Components/Cases/CasesAdd.tsx","Components/Cases/CasesEditGroup.tsx","Components/Cases/CasesDeleteGroup.tsx","Components/Cases/CasesCaseItem.tsx","Components/Cases/CasesGroupItem.tsx","Components/Cases/CasesNavigation.tsx","Components/Cases/CasesSidebar.tsx","Components/MainWindow.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","Navbar","boxShadow","maxW","align","height","w","src","mr","label","calculatePoints","cases","availablePoints","groupsWithoutPointsDefined","forEach","element","name","groupCase","console","log","arePointsDefined","points","pointsDefined","fractionalPoints","map","globalModel","title","titleName","setTitleName","action","state","payload","isMain","addCase","groupToSearch","group","groupFound","push","sort","a","b","updateCase","oldName","newName","individualCase","removeCase","filter","GlobalStore","createStore","persist","typedHooks","createTypedHooks","useStoreActions","useStoreState","useStoreDispatch","Header","titleText","setTitleText","actions","useState","isEditTitleActive","setIsEditTitleActive","useDisclosure","isOpen","onOpen","onClose","cancelRef","useRef","mt","defaultValue","fontWeight","placeholder","onEdit","onSubmit","event","value","onCancel","width","undefined","colorScheme","leastDestructiveRef","isCentered","ref","ml","sessionStorage","clear","window","location","reload","CasesAdd","isGroup","setIsGroup","groupRef","useForm","defaultValues","register","handleSubmit","errors","formState","toast","useToast","caseState","data","current","invalid","description","status","autoComplete","isRequired","required","onChange","target","isDisabled","type","min","max","CasesEditGroup","groupName","groupPoints","automaticPoints","setAutomaticPoints","pointsRef","updateState","parseInt","isValid","duplicateExist","checkIfGroupExist","isChecked","e","checked","CasesDeleteGroup","deleteState","CasesCaseItem","caseName","shouldShowPoints","toFixed","CasesGroupItem","styled","div","showCases","setShowCases","borderColor","find","isOpenEdit","onOpenEdit","onCloseEdit","isOpenRemove","onOpenRemove","onCloseRemove","isLargeScreen","useMediaPredicate","direction","my","mb","cursor","transition","_hover","borderLeft","paddingLeft","pageX","currentTarget","offsetLeft","clientWidth","handleCasesToggleClick","parseFloat","Math","round","isLazy","as","IconButton","syle","zIndex","motion","initial","opacity","y","animate","style","display","CasesNavigation","CasesSidebar","divBorderColor","isOpenAdd","onOpenAdd","onCloseAdd","x","h","borderRight","MainWindow","padding","App","isRehydrated","useStoreRehydrated","theme","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.4dfb3ad1.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport { Box, Spacer, Flex, Image, Container, Tooltip } from \"@chakra-ui/react\";\nimport { AiFillGithub } from \"react-icons/ai\";\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\n\nconst Navbar = () => {\n  return (\n    <Box boxShadow={\"md\"}>\n      <Container maxW={\"container.lg\"}>\n        <Flex align={\"center\"} height={\"38px\"}>\n          <Box w={\"86px\"}>\n            <Image\n              w={\"full\"}\n              src={\"https://omegaup.com/preguntas//omegaup_curves.png\"}\n            />\n          </Box>\n          <Spacer />\n          <Box mr={5}>\n            <ColorModeSwitcher />\n          </Box>\n          <Box>\n            <Tooltip\n              label={\"Colabora con nosotros en Github!\"}\n              aria-label={\"Colabora\"}\n            >\n              <span>\n                <AiFillGithub size={25} />\n              </span>\n            </Tooltip>\n          </Box>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Navbar;\n","import { action, Action } from \"easy-peasy\";\n\n// TODO Check if another group is trying to rename it to an existing name\n// TODO Change color depending if the point is defined\n// TODO Add points to modal\ninterface CaseElement {\n  name: string;\n  group: string;\n  arePointsDefined: boolean;\n  points: number;\n}\n\ninterface Group {\n  name: string;\n  points: number;\n  pointsDefined: boolean;\n  isMain: boolean;\n  cases: CaseElement[];\n}\n\ninterface IUpdate {\n  oldName: string;\n  newName: string;\n  points: number;\n  pointsDefined: boolean;\n}\n\nexport interface ICasesModel {\n  cases: Group[];\n  availablePoints: number;\n  addCase: Action<ICasesModel, CaseElement>;\n  updateCase: Action<ICasesModel, IUpdate>;\n  removeCase: Action<ICasesModel, string>;\n}\n\nfunction calculatePoints(cases: Group[]): Group[] {\n  var availablePoints = 100;\n\n  var groupsWithoutPointsDefined = 0;\n\n  cases.forEach((element) => {\n    if (element.name === \"mainGroup\") {\n      element.cases.forEach((groupCase) => {\n        // Los que esten en el grupo principal deben ser contados como individuales tambien!!data.points\n        console.log(groupCase);\n        if (groupCase.arePointsDefined) {\n          availablePoints -= groupCase.points;\n        } else {\n          groupsWithoutPointsDefined += 1;\n        }\n      });\n    } else {\n      if (element.pointsDefined) {\n        availablePoints -= element.points;\n      } else {\n        groupsWithoutPointsDefined += 1;\n      }\n    }\n  });\n\n  console.log(\"group: \" + groupsWithoutPointsDefined + \" \" + availablePoints);\n  let fractionalPoints = availablePoints / groupsWithoutPointsDefined;\n  return cases.map((element) => {\n    if (element.name === \"mainGroup\") {\n      element.cases = element.cases.map((groupCase) => {\n        if (!groupCase.arePointsDefined) {\n          groupCase.points = fractionalPoints;\n        }\n        return groupCase;\n      });\n    }\n    if (!element.pointsDefined) {\n      element.points = fractionalPoints;\n    }\n    return element;\n  });\n}\n\nconst CasesModel = <ICasesModel>{\n  cases: [\n    {\n      name: \"mainGroup\",\n      points: 0,\n      isMain: true,\n      pointsDefined: false,\n      cases: [],\n    },\n  ],\n  availablePoints: 100,\n  addCase: action((state, payload) => {\n    const groupToSearch = payload.group;\n    let groupFound = false;\n\n    console.log(\"searching\");\n    state.cases.map((element) => {\n      if (element.name === groupToSearch) {\n        element.cases.push(payload);\n        groupFound = true;\n        element.cases.sort((a, b) => {\n          if (a.name < b.name) return -1;\n          else if (a.name === b.name) return 0;\n          else return 1;\n        });\n      }\n      return element;\n    });\n\n    if (!groupFound) {\n      state.cases.push({\n        name: groupToSearch,\n        points: 0,\n        isMain: false,\n        pointsDefined: false,\n        cases: [payload],\n      });\n    }\n\n    // Calculate Available Points\n\n    state.cases = calculatePoints(state.cases);\n  }),\n\n  updateCase: action((state, payload) => {\n    // Itero por todos los grupos y busco el que quiero cambiar\n    state.cases.map((element) => {\n      if (element.name === payload.oldName) {\n        element.name = payload.newName; // Cambio el nombre del grupo\n        element.points = payload.points; // Cambio el puntaje del grupo\n        element.pointsDefined = payload.pointsDefined;\n        element.cases = element.cases.map((individualCase) => {\n          // Cambio el nombre de grupo de los hijos\n          individualCase.group = payload.newName;\n          return individualCase;\n        });\n      }\n      return element;\n    });\n    state.cases = calculatePoints(state.cases);\n    state.cases.sort();\n  }),\n\n  removeCase: action((state, payload) => {\n    state.cases = state.cases.filter((element) => {\n      // console.log(element.name + \" \" + payload);\n      return element.name !== payload;\n    });\n    state.cases = calculatePoints(state.cases);\n  }),\n};\n\nexport default CasesModel;\n","import title, { ITitleModel } from \"./Models/TitleModel\";\nimport cases, { ICasesModel } from \"./Models/CasesModel\";\nimport { createStore, createTypedHooks, persist } from \"easy-peasy\";\n\nconst globalModel = {\n  title,\n  cases,\n};\n\ninterface IGlobalModel {\n  title: ITitleModel;\n  cases: ICasesModel;\n}\n\nconst GlobalStore = createStore(persist(globalModel));\nexport default GlobalStore;\n\nconst typedHooks = createTypedHooks<IGlobalModel>();\nexport const useStoreActions = typedHooks.useStoreActions;\nexport const useStoreDispatch = typedHooks.useStoreDispatch;\nexport const useStoreState = typedHooks.useStoreState;\n","import { action, Action } from \"easy-peasy\";\n\nexport interface ITitleModel {\n  titleName: string;\n  setTitleName: Action<ITitleModel, string>;\n}\n\nconst TitleModel = <ITitleModel>{\n  titleName: \"Nuevo Problema\",\n  setTitleName: action((state, payload) => {\n    state.titleName = payload;\n  }),\n};\n\nexport default TitleModel;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Editable,\n  EditableInput,\n  EditablePreview,\n  HStack,\n  Spacer,\n  useDisclosure,\n  AlertDialogOverlay,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogBody,\n  AlertDialog,\n} from \"@chakra-ui/react\";\nimport { AiFillEdit } from \"react-icons/ai\";\nimport { useRef, useState } from \"react\";\nimport { useStoreActions, useStoreState } from \"../Redux/Store\";\n\nconst Header = () => {\n  const titleText = useStoreState((state) => state.title.titleName);\n  const setTitleText = useStoreActions((actions) => actions.title.setTitleName);\n\n  const [isEditTitleActive, setIsEditTitleActive] = useState(false);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = useRef<HTMLButtonElement>(null);\n\n  function handleTitleSubmit(value: string) {\n    setIsEditTitleActive(false);\n    setTitleText(value);\n    console.log(value);\n  }\n\n  function createNewProblem() {\n    sessionStorage.clear();\n    window.location.reload();\n  }\n\n  return (\n    <Container maxW={\"container.lg\"}>\n      <Box mt={\"5\"}>\n        <HStack>\n          <Editable\n            defaultValue={titleText}\n            fontSize={\"xl\"}\n            fontWeight={\"bold\"}\n            placeholder={\"Escribe el nombre del problema\"}\n            onEdit={() => setIsEditTitleActive(true)}\n            onSubmit={(event) => handleTitleSubmit(event)}\n            onCancel={() => setIsEditTitleActive(false)}\n            width={isEditTitleActive ? \"50%\" : undefined}\n          >\n            <EditablePreview />\n            <EditableInput />\n          </Editable>\n          <span>\n            <AiFillEdit />\n          </span>\n          <Spacer />\n          <Button size={\"sm\"}> Cargar Problema </Button>\n          <Button size={\"sm\"} colorScheme={\"blue\"}>\n            Guardar Problema\n          </Button>\n          <Button size={\"sm\"} colorScheme={\"orange\"} onClick={onOpen}>\n            Nuevo Problema\n          </Button>\n          <AlertDialog\n            leastDestructiveRef={cancelRef}\n            onClose={onClose}\n            isOpen={isOpen}\n            isCentered\n          >\n            <AlertDialogOverlay />\n\n            <AlertDialogContent>\n              <AlertDialogHeader>Crear nuevo problema</AlertDialogHeader>\n              <AlertDialogBody>\n                ¿Deseas crear un nuevo problema? Se borrará TODO el problema\n                anterior. Guarda el problema primero antes de crear uno nuevo.\n              </AlertDialogBody>\n              <AlertDialogFooter>\n                <Button ref={cancelRef} onClick={onClose}>\n                  No\n                </Button>\n                <Button\n                  colorScheme=\"red\"\n                  ml={3}\n                  onClick={() => createNewProblem()}\n                >\n                  Sí\n                </Button>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </HStack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useStoreActions, useStoreState } from \"../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n}\n\ninterface ICase {\n  name: string;\n  group: string;\n  points: number;\n}\n\nconst CasesAdd = ({ isOpen, onClose, title }: PropTypes) => {\n  const [isGroup, setIsGroup] = useState(false);\n  const groupRef = useRef<HTMLInputElement>(null);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name: \"\",\n      group: \"\",\n      points: undefined,\n    },\n  });\n\n  const toast = useToast();\n\n  const addCase = useStoreActions((actions) => actions.cases.addCase);\n  const caseState = useStoreState((state) => state.cases.cases);\n\n  function createCase(data: ICase) {\n    const { current } = groupRef;\n    data.group = current ? current.value : \"\";\n    data.group = data.group === \"\" ? \"mainGroup\" : data.group;\n\n    let invalid = false;\n    caseState.forEach((group) => {\n      if (group.name === data.group) {\n        group.cases.forEach((individualCase) => {\n          if (individualCase.name === data.name) {\n            invalid = true;\n            return;\n          }\n        });\n      }\n    });\n\n    if (invalid) {\n      toast({\n        title: \"Nombre repetido\",\n        description:\n          \"No puedes tener casos con el mismo nombre dentro de un grupo\",\n        status: \"error\",\n      });\n      return;\n    }\n\n    console.log(\"points \" + data.points);\n    addCase({\n      name: data.name,\n      group: data.group,\n      arePointsDefined: data.points ? true : false,\n      points: data.points ? data.points : 0,\n    });\n\n    toast({\n      title: \"Caso creado\",\n      description: \"El caso ha sido creado correctamente\",\n      status: \"success\",\n    });\n\n    onClose();\n  }\n\n  function checkIfGroup(event: React.ChangeEvent<HTMLInputElement>) {\n    event.target.value !== \"\" ? setIsGroup(true) : setIsGroup(false);\n  }\n\n  function checkWhitespaces(inputToCheck: string): boolean {\n    return !inputToCheck.includes(\" \");\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{title}</ModalHeader>\n        <ModalCloseButton />\n        <form onSubmit={handleSubmit(createCase)} autoComplete={\"off\"}>\n          <ModalBody>\n            <FormControl isRequired>\n              <FormLabel> Nombre del caso</FormLabel>\n              <Input\n                {...register(\"name\", {\n                  required: true,\n                })}\n              />\n            </FormControl>\n            <FormControl mt={4}>\n              <FormLabel> Nombre del grupo</FormLabel>\n              <Input\n                {...register(\"group\")}\n                onChange={checkIfGroup}\n                ref={groupRef}\n              />\n            </FormControl>\n            <FormControl mt={4} isDisabled={isGroup}>\n              <FormLabel> Puntaje del caso (opcional)</FormLabel>\n              <Input\n                type={\"number\"}\n                {...register(\"points\", { min: 0, max: 100 })}\n              />\n              {isGroup && (\n                <FormHelperText>\n                  No puedes asignar puntos individuales si el caso está dentro\n                  de un grupo\n                </FormHelperText>\n              )}\n              {errors.points && (\n                <Alert status=\"error\" mt={3}>\n                  <AlertIcon />\n                  <AlertTitle mr={2}>Error</AlertTitle>\n                  <AlertDescription>\n                    Ingresa un número entre 0 y 100\n                  </AlertDescription>\n                </Alert>\n              )}\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button colorScheme=\"green\" type={\"submit\"}>\n              Agregar Caso\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CasesAdd;\n","import * as React from \"react\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  Checkbox,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  toast,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useStoreActions, useStoreState } from \"../../Redux/Store\";\nimport { useRef, useState } from \"react\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupName: string;\n  groupPoints: number;\n  pointsDefined: boolean;\n}\n\ninterface IData {\n  name: string;\n  points: number;\n}\n\nconst CasesEditGroup = ({\n  isOpen,\n  onClose,\n  groupName,\n  groupPoints,\n  pointsDefined,\n}: PropTypes) => {\n  const [automaticPoints, setAutomaticPoints] = useState(!pointsDefined);\n\n  const pointsRef = useRef<HTMLInputElement>(null);\n\n  const caseState = useStoreState((state) => state.cases.cases);\n  const updateState = useStoreActions((actions) => actions.cases.updateCase);\n\n  const toast = useToast();\n\n  function checkIfGroupExist(data: IData): boolean {\n    let duplicateExist = false;\n    caseState.forEach((group) => {\n      if (group.name === data.name) {\n        duplicateExist = true;\n      }\n    });\n\n    return duplicateExist;\n  }\n\n  function editCase(data: IData) {\n    const { current } = pointsRef;\n    data.points = current ? parseInt(current.value) : 0;\n\n    let isValid = true;\n\n    if (data.name !== groupName) {\n      if (checkIfGroupExist(data)) {\n        toast({\n          title: \"Nombre repetido\",\n          description: \"No puedes tener dos grupos con el mismo nombre\",\n          status: \"error\",\n        });\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      updateState({\n        oldName: groupName,\n        newName: data.name,\n        points: data.points,\n        pointsDefined: !automaticPoints,\n      });\n      onClose();\n    }\n  }\n\n  const { register, handleSubmit } = useForm({\n    defaultValues: {\n      name: `${groupName}`,\n      points: `${groupPoints}`,\n    },\n  });\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Editar Grupo</ModalHeader>\n        <ModalCloseButton />\n        <form onSubmit={handleSubmit(editCase)} autoComplete={\"off\"}>\n          <ModalBody>\n            <FormControl isRequired>\n              <FormLabel> Nombre del caso</FormLabel>\n              <Input {...register(\"name\")} />\n            </FormControl>\n            <FormControl mt={4} isDisabled={automaticPoints}>\n              <FormLabel> Puntaje del grupo</FormLabel>\n              <Input\n                type={\"number\"}\n                {...register(\"points\", { min: 0, max: 100 })}\n                ref={pointsRef}\n              />\n              {automaticPoints && (\n                <FormHelperText>\n                  El programa automáticamente generará los puntos.\n                </FormHelperText>\n              )}\n            </FormControl>\n            <Checkbox\n              mt={4}\n              isChecked={automaticPoints}\n              onChange={(e) => setAutomaticPoints(e.target.checked)}\n            >\n              {\" \"}\n              Puntaje Automático{\" \"}\n            </Checkbox>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n              Close\n            </Button>\n            <Button colorScheme=\"green\" type={\"submit\"}>\n              Editar Caso\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CasesEditGroup;\n","import * as React from \"react\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Button,\n  FormControl,\n  FormHelperText,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  toast,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport { useStoreActions, useStoreState } from \"../../Redux/Store\";\n\ninterface PropTypes {\n  isOpen: boolean;\n  onClose: () => void;\n  groupName: string;\n}\n\ninterface IData {\n  name: string;\n  points: number;\n}\n\nconst CasesDeleteGroup = ({ isOpen, onClose, groupName }: PropTypes) => {\n  const deleteState = useStoreActions((actions) => actions.cases.removeCase);\n\n  const toast = useToast();\n\n  function removeCase() {\n    deleteState(groupName);\n\n    toast({\n      title: \"Grupo borrado\",\n      description: \"El grupo ha sido borrado exitosamente\",\n      status: \"success\",\n    });\n\n    onClose();\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Borar Grupo</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          ¿Estás seguro que deseas borrar este grupo? Este cambio no se puede\n          deshacer\n        </ModalBody>\n        <ModalFooter>\n          <Button variant={\"ghost\"} mr={3} onClick={onClose}>\n            Cerrar\n          </Button>\n          <Button\n            colorScheme=\"red\"\n            type={\"submit\"}\n            onClick={() => removeCase()}\n          >\n            Borrar Grupo\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CasesDeleteGroup;\n","import * as React from \"react\";\nimport { Badge, Box, Button, HStack } from \"@chakra-ui/react\";\n\ninterface PropTypes {\n  groupName: string;\n  caseName: string;\n  pointsDefined: boolean;\n  points: number;\n  shouldShowPoints: boolean;\n}\nconst CasesCaseItem = ({\n  groupName,\n  caseName,\n  pointsDefined,\n  points,\n  shouldShowPoints,\n}: PropTypes) => {\n  return (\n    <Button variant={\"ghost\"} size={\"sm\"}>\n      <HStack>\n        <span>{caseName}</span>\n        {shouldShowPoints && (\n          <Badge colorScheme={pointsDefined ? \"green\" : \"blue\"}>\n            {points.toFixed(2) + \" PTS\"}\n          </Badge>\n        )}\n      </HStack>\n    </Button>\n  );\n};\n\nexport default CasesCaseItem;\n","import * as React from \"react\";\nimport {\n  Badge,\n  Box,\n  Divider,\n  HStack,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Spacer,\n  Tooltip,\n  useColorModeValue,\n  useDisclosure,\n  Flex,\n  Button,\n} from \"@chakra-ui/react\";\nimport { HiOutlineDotsVertical as Dots } from \"react-icons/hi\";\nimport CasesEditGroup from \"./CasesEditGroup\";\nimport CasesDeleteGroup from \"./CasesDeleteGroup\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport styled from \"styled-components\";\nimport CasesCaseItem from \"./CasesCaseItem\";\nimport { useStoreState } from \"../../Redux/Store\";\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\ninterface PropTypes {\n  name: string;\n  points: number;\n  arePointsDefined: boolean;\n}\n\nconst CasesGroupItem = ({ name, points, arePointsDefined }: PropTypes) => {\n  const [showCases, setShowCases] = useState(false);\n\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n  const caseState = useStoreState((state) => {\n    return state.cases.cases.find((value) => value.name === name);\n  });\n\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n\n  const {\n    isOpen: isOpenRemove,\n    onOpen: onOpenRemove,\n    onClose: onCloseRemove,\n  } = useDisclosure();\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  function handleCasesToggleClick(event: React.MouseEvent<HTMLDivElement>) {\n    let percentage =\n      ((event.pageX - event.currentTarget.offsetLeft) * 100) /\n      event.currentTarget.clientWidth;\n    if (percentage < 80) setShowCases(!showCases);\n  }\n\n  return (\n    <Flex direction={\"column\"}>\n      <Box my={2}>\n        <HStack\n          mb={2}\n          cursor={\"pointer\"}\n          transition={\"padding-left 0.1s\"}\n          _hover={{\n            borderLeft: \"2px\",\n            borderColor: `${borderColor}`,\n            paddingLeft: \"5px\",\n          }}\n          onClick={(event) => handleCasesToggleClick(event)}\n        >\n          <Box>{name === \"mainGroup\" ? \"Sin Grupo\" : name}</Box>\n          <Spacer />\n          {name !== \"mainGroup\" && (\n            <>\n              <Tooltip\n                label={\n                  \"Estos serán los puntos que obtendrá el usuario si resuelve correctamente el grupo\"\n                }\n              >\n                <Badge\n                  colorScheme={arePointsDefined ? \"green\" : \"blue\"}\n                  size={\"sm\"}\n                >\n                  {isLargeScreen ? (\n                    <span> {parseFloat(\"\" + points).toFixed(2) + \" pts\"}</span>\n                  ) : (\n                    <span>{Math.round(points)} </span>\n                  )}\n                </Badge>\n              </Tooltip>\n\n              <Menu isLazy>\n                <MenuButton\n                  as={IconButton}\n                  icon={<Dots />}\n                  size={\"sm\"}\n                  syle={{ zIndex: 99 }}\n                />\n                <MenuList>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenEdit}>\n                    Editar Grupo\n                  </MenuItem>\n                  <MenuItem fontSize={\"sm\"} onClick={onOpenRemove}>\n                    Eliminar Grupo\n                  </MenuItem>\n                </MenuList>\n              </Menu>\n            </>\n          )}\n        </HStack>\n        <Divider />\n        <CasesEditGroup\n          isOpen={isOpenEdit}\n          onClose={onCloseEdit}\n          groupName={name}\n          groupPoints={points}\n          pointsDefined={arePointsDefined}\n        />\n        <CasesDeleteGroup\n          isOpen={isOpenRemove}\n          onClose={onCloseRemove}\n          groupName={name}\n        />\n      </Box>\n      <Box ml={2}>\n        {caseState &&\n          showCases &&\n          caseState.cases.map((element) => (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              style={{ display: \"inline-block\" }}\n              key={element.name + element.group}\n            >\n              <CasesCaseItem\n                caseName={element.name}\n                groupName={element.group}\n                pointsDefined={element.arePointsDefined}\n                points={element.points}\n                shouldShowPoints={name === \"mainGroup\"}\n              />\n            </motion.div>\n          ))}\n      </Box>\n    </Flex>\n  );\n};\n\nconst MenuFullButton = styled.div`\n  //background-color: black;\n  position: absolute;\n  width: 20%;\n  height: 30px;\n`;\n\nexport default CasesGroupItem;\n","import * as React from \"react\";\nimport { useStoreState } from \"../../Redux/Store\";\nimport { Box } from \"@chakra-ui/react\";\nimport CasesGroupItem from \"./CasesGroupItem\";\n\nconst CasesNavigation = () => {\n  const caseState = useStoreState((state) => state.cases.cases);\n\n  return (\n    <Box mt={2}>\n      {caseState.map((group) => (\n        <CasesGroupItem\n          name={group.name}\n          points={group.points}\n          arePointsDefined={group.pointsDefined}\n          key={group.name}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default CasesNavigation;\n","import * as React from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  HStack,\n  Spacer,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport CasesAdd from \"./CasesAdd\";\nimport CasesNavigation from \"./CasesNavigation\";\nimport { useMediaPredicate } from \"react-media-hook\";\nconst CasesSidebar = () => {\n  const divBorderColor = useColorModeValue(\"gray.200\", \"gray.600\");\n\n  const {\n    isOpen: isOpenAdd,\n    onOpen: onOpenAdd,\n    onClose: onCloseAdd,\n  } = useDisclosure();\n\n  const isLargeScreen = useMediaPredicate(\"(min-width: 830px)\");\n\n  return (\n    <motion.div initial={{ opacity: 0, x: -50 }} animate={{ opacity: 1, x: 0 }}>\n      <Box\n        w={\"30%\"}\n        h={\"75vh\"}\n        borderRight={\"1px\"}\n        borderColor={divBorderColor}\n      >\n        <Box width={\"90%\"}>\n          <Flex align={\"center\"} mb={4}>\n            <Text mr={5} fontSize={\"xl\"} fontWeight={\"bold\"}>\n              Grupos\n            </Text>\n            <Spacer />\n            <Button size={\"sm\"} colorScheme={\"green\"} onClick={onOpenAdd}>\n              {isLargeScreen ? <p> Agregar Caso</p> : <p> + </p>}\n            </Button>\n            <CasesAdd\n              isOpen={isOpenAdd}\n              onClose={onCloseAdd}\n              title={\"Agregar Problema\"}\n            />\n          </Flex>\n          <Divider />\n          <CasesNavigation />\n        </Box>\n      </Box>\n    </motion.div>\n  );\n};\n\nexport default CasesSidebar;\n","import * as React from \"react\";\nimport { Container, HStack } from \"@chakra-ui/react\";\nimport { Tabs, TabList, TabPanels, Tab, TabPanel } from \"@chakra-ui/react\";\nimport { BiCodeBlock as CodeIcon } from \"react-icons/bi\";\nimport { BsPencil as EditIcon } from \"react-icons/bs\";\nimport { IoMdCheckmarkCircleOutline as CheckIcon } from \"react-icons/io\";\nimport CasesSidebar from \"./Cases/CasesSidebar\";\n\nconst MainWindow = () => {\n  return (\n    <>\n      <Container maxW={\"container.lg\"} mt={3} h={\"80vh\"} padding={\"0\"}>\n        <Tabs variant={\"enclosed\"} size={\"sm\"} isLazy={true}>\n          <TabList>\n            <Tab>\n              <HStack>\n                <CodeIcon />\n                <p>Código Solución</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <CheckIcon />\n                <p>Casos de Prueba</p>\n              </HStack>\n            </Tab>\n            <Tab>\n              <HStack>\n                <EditIcon />\n                <p>Redacción</p>\n              </HStack>\n            </Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>1</TabPanel>\n            <TabPanel>\n              <CasesSidebar />\n            </TabPanel>\n            <TabPanel>3</TabPanel>\n          </TabPanels>\n        </Tabs>\n        {/*<Sidebar />*/}\n      </Container>\n    </>\n  );\n};\n\nexport default MainWindow;\n","import * as React from \"react\";\nimport { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport { useStoreRehydrated } from \"easy-peasy\";\nimport Navbar from \"./Components/Navbar\";\nimport Header from \"./Components/Header\";\nimport MainWindow from \"./Components/MainWindow\";\n\nexport const App = () => {\n  const isRehydrated = useStoreRehydrated();\n\n  return (\n    <ChakraProvider theme={theme}>\n      {!isRehydrated ? (\n        <h1> Loading </h1>\n      ) : (\n        <>\n          <Navbar />\n          <Header />\n          <MainWindow />\n        </>\n      )}\n    </ChakraProvider>\n  );\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { StoreProvider } from \"easy-peasy\";\nimport store from \"./Redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store={store}>\n      <ColorModeScript />\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}